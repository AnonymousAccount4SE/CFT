# codeDirs
#
# Semicolon-separated list of directories to locate code, in sequence
# from work-directories towards library directories. 
#
# The first directory is the default save directory. This means that working
# on a script file from one of the other directories, when you save it, you
# don't overwrite the original, but instead store it in the first directory,
# and may later manually move it to the target directory, when it's ok.
# ----

codeDirs = . ; code.examples ; code.lib


# Favourite shell, for the shell() global function
# ----

shell = bash
winShell = powershell




# Macros invoked for statements "cat", "edit" and "more". The single parameter
# may be null or point to a file.
# ----

mCat = Lambda { P(1)=>file error(file==null, 'cat: no file') file.read->line println(line) }

mEdit = Lambda { P(1)=>file if(file==null, Sys.savefile, file) => file Lib:e(file) }

mMore = Lambda { P(1)=>file error(file==null, 'more: no file') Lib:m(file) }


# Shortcuts
#
# The shortcuts are lines of code. The return value from a shortcut becomes 
# the "last value", available via Sys.lastResult, as well as used by :syn etc
#
# Note that shortcuts only work when the prefix is at the start of the interactive
# input line. 
# ---
shortcutPrefix = @


shortcut:e    = "---- open script in editor ----"         if(Sys.savefile != null, Lib:e(Sys.savefile),"No savefile")
shortcut:ee   = "---- clear editor selection ----"        Lib:ClearEditor "Editor cleared"
shortcut:fm   = "---- open file manager (curr dir) ---"   Lib:fileManager(Dir)
shortcut:term = "---- Update terminal size ----"          Lib:GetTerminalSize
shortcut:rsh  = "---- Remote shell via ssh ----"          SSH:remoteShell
shortcut:scr  = "---- Show all scripts ----"              Lib:Scripts
#shortcut:S    = "---- Search text files curr Dir ----"    Lib:SearchTextFiles(Dir)

shortcut:home = "---- move to script dir ----"			  Sys.savefile.dir.setAsCurrentDir

# copy / paste file
#shortcut:c    = "---- copy file to clipboard ----"        Lib:ClipboardCopy(Lib:MenuSelect(Dir.files, Lambda{P(1).name}, "Select file / blank for none", true))
#shortcut:v    = "---- paste file from clipboard ----"     Lib:ClipboardPaste(Dir)

# Release script
shortcut:rel  = "---- Release ----"                       Sys.stdin(":load Release","?")

# Projects script 
shortcut:P    = "---- Projects ----"                      Sys.stdin(":load Projects","?")
shortcut:PS   = "---- Projects perform search ----"       Projects:Curr Projects:S

# Investigate script
shortcut:i    = "---- Investigate log text ----"          Investigate:LogText
shortcut:ii   = "---- Investigate log input loop ----"    Investigate:InputMode
shortcut:id   = "---- Investigate log with data ----"     Investigate:LogData


# List available shortcuts when typing '@' only
# ---
shortcut:     = "---- Show all shortcuts ----"            File("CFT.props").read->line assert(line.startsWith("shortcut:")) out(line)





#
# The prompt setting is a line of code, just as with the shortcuts
# ---

prompt = x=Sys.scriptName h=Lib:Hostname u=Lib:LoggedInUser("<",">")  if(h==null,"",h) + if(x==null,"","[" + x+"]") + "$ "


#
# The "bang command" is a configurable parser that is invoked when typing
# '!' as first character. The rest of the line (String) becomes P(2). Must
# put current Dir as parameter 1, as BangParser is a separate script and
# maintains a separate current Dir :-) 
# ---
#

bangCommand = BangParser:Run(Dir,P(1))


#
# Lib.Db2
#

db2Dir = private/Db2

#
# Global onLoad - when CFT is started
# 

globalOnLoad = Lib:GetTerminalSize
