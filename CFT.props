# Semicolon-separated list of directories to locate code, in sequence
# from work-directories towards library directories. 

# The first directory is the default save directory. This means that working
# on a script file from one of the other directories, when you save it, you
# don't overwrite the original, but instead store it in the first directory,
# and may later manually move it to the target directory, when it's ok.
# ----

codeDirs = . ; code.examples ; code.lib


# Favourite shell, for the shell() global function
# ----

shell = /usr/bin/bash
winShell = powershell


# Macros invoked for statements "cat", "edit" and "more". The single parameter
# may be null or point to a file.
# ----

mCat = {* P(1)=file when(file==null,error('cat: no file')) file.read->line out(line) }

mEdit = {* P(1)=file if(file==null, {call 'Lib:e2'}, {call 'Lib:e' (file)}) }

mMore = {* P(1)=file when(file==null,error('more: no file')) call 'Lib:m' (file) }


# Shortcuts
#
# The shortcuts are lines of code. If that code results in a macro, it is invoked with
# no parameters. Since we don't need parameters, there is really no need for macros
# here. The return value from a shortcut becomes the "last value", available
# via Sys.lastResult, as well as used by :syn etc
#
# Note that shortcuts only work when the prefix is at the start of the interactive
# input line. 
# ---
shortcutPrefix = @

shortcut:r = stdin(":load Release","?")
shortcut:p = stdin(":load Projects","Curr")
shortcut:e = call "Lib:e" (savefile)

shortcut:term = call "Lib:GetTerminalSize"


# List available shortcuts when typing '@' only
# ---
shortcut: = File("CFT.props").read->line assert(line.contains("shortcut:")) out(line)


