# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2023 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Is root on linux?
# --
    if (!Sys.isWindows) {
        Dir.runCapture("whoami").nth.trim=="root"
    } else {
        false
    }
//IsRoot


# IsRootMark
# --
    if(IsRoot,Curses:Reversed + "#root#" + Curses:Reset + " ", "")
/IsRootMark


# Get hostname string if defined / for inclusion in prompt
# --
    h=Db2:Get(Sys.scriptId,"hostname",null)
    if (h==null) h=""
    if (h.length > 0) h="|"+h
    h
/Hostname


# Set hostname string (used in prompt)
# --
    P(1,readLine("Hostname"))=>hostName
    Db2:Set(Sys.scriptId,"hostname", hostName)
/SetHostname


# Set text color for current path in prompt
# --
    P(1,Curses:SelectColor) => col
    Db2:Set(Sys.scriptId,"path.color", col)
/SetPathColor


# Get text color for path (in Path function)
# --
    if (Curses:Enabled, Db2:Get(Sys.scriptId,"path.color",""), "")
/GetPathColor


# Set Prompt color
# --
	P(1,Curses:SelectColor)=>col
	Db2:Set(Sys.scriptId,"prompt.color",col)
/SetColor


# Get Prompt color
# --
	if (Curses:Enabled, Db2:Get(Sys.scriptId,"prompt.color",""), "")
/GetColor

# Format current dir for prompt
# --
    P(1,Dir)=>dir
    s=dir.path

    # return value
    GetPathColor + s + Curses:Reset
/Path


# List completed jobs (when changes)
# --
	running=Jobs:Running

	isBlocked=Inner{
		running->job assert(Sys.Jobs.get(job).isBlockedOnInputSince != null) out(job)
	}.length

	hasOutput=Inner{
		running->job assert(Sys.Jobs.get(job).hasOutput) out(job)
	}.length

	completed=Jobs:Completed.length

	s=null

	if (isBlocked > 0)           s="blocked=" + isBlocked
	else if (hasOutput > 0)      s="has-output=" + hasOutput
	else if (completed > 0)      s="completed=" + completed
	else if (running.length > 0) s="running="+running.length

	if (s != null) s="Jobs:" + s

	s
/JobsStatus
    

# Complete prompt
# --
	P(1,Dir) => currDir
	P(2) => scriptName

	color=GetColor

	hostname=Db2:Get(Sys.scriptId,"hostname",null)
	parts=List

	js=JobsStatus
	if (js != null) parts.add(js)
	parts.add(Path(currDir)+Curses:Reset+color)

	if (hostname != null && hostname != "") parts.add(hostname)
	if (scriptName != null) parts.add("<" + scriptName + ">")
	if(IsRoot) {
		parts.add(Curses:Reversed + "#root#" + Curses:Reset)
	}
	color + "[" + parts.concat(" ") + "]" + Curses:Reset
/PromptString