# Readme
# --
<<< EOF
Simple file based database v2 - now using Java implementation Lib.Db2 (2020-11-01)
>>> EOF
/Readme


P(1,true) => showDebug
	ValDef("debug",showDebug)
/EnableDebug


# Helper
# --
	Lib:Header("Enter collection.")
	coll = Collections

	if (coll.length==0) {
		println("- None created")
	} else {
		println("- Existing collections: " + coll.concat(" "))
	}

	Input("collection").get
/inputCollection


		
# Store data
# --
	P(1)=>collection
	P(2)=>key
	P(3)=>value

	error(collection.startsWith("@"), "Invalid collection, '@' indicates system collections")
	
	start=currentTimeMillis

	Lib.Db2("@collections").set(collection,collection)
	
	x = Lambda {syn(P(1))}
	error (x.?call(value)==false, "Value not synthesizable")
	value = syn(value)
	
	Lib.Db2(collection).set(key,value)

	end=currentTimeMillis
	if(Val("debug",false)) println("[debug] Db2: Set " + collection + " " + (end-start) + " ms")
/Set






# Get data
# --
	P(1,inputCollection)=>collection
	P(2,Input("key").get)=>key
	P(3)=>defaultValue
	
	start=currentTimeMillis

	value=Lib.Db2(collection).get(key)
	value = if (value == null, defaultValue, eval(value))

	end=currentTimeMillis

	if(Val("debug",false)) println("[debug] Db2: Get " + collection + " " + (end-start) + " ms")
	
	value
/Get



# Get keys
# --
	P(1)=>collection
	Lib.Db2(collection).keys.sort
/Keys




# Show collections
# --
	Lib.Db2("@collections").keys.sort
/Collections


# Show content
# --
	P(1,inputCollection)=>collection
	Keys(collection)->key
		report(collection, key, Get(collection,key))
/Show


