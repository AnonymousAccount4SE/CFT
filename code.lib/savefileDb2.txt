# Readme
# --
<<< EOF
Simple file based database v2
>>> EOF
/Readme


P(1,false) => showDebug
	ValDef("debug",showDebug)
/ShowDebug


# Database dir
	d=Lib:DirPrivate.sub("Db2")
	if (!d.exists) d.create
	d
/DbDir

# Collection file
# --
P(1) => collection
	fname=(""+collection).replace(" ","_")+".txt"
	DbDir.file(fname)
/CollectionFile


# Get collection data
# --
	P(1) => collection

	file=CollectionFile(collection)
	fname=file.name
	
	if (file.exists) {
		filekey=""+file.lastModified+"_"+file.length

		if (Val("stats",Dict).get(fname,"") != filekey) Inner {
			# file has changed
			
			linecount=0
			reader = Lib.Files.LineReader(file).start
			fileData=Dict
			loop
				line=reader.read
				break(line==null)
				linecount=linecount+1
				key=line.before(" ")
				value=line.after(" ")
				fileData.set(key,value)
			|
			if (Val("debug",false)) println("[debug] Db2: read file " + fname + " lines=" + linecount)
			Val("filedata",Dict).set(fname, fileData)
		} 
		Val("stats",Dict).set(fname, filekey)
	} 
	
	Val("filedata",Dict).get(fname, Dict)
/CollectionDict



			
# Store data
# --
	P(1)=>collection
	P(2)=>key
	P(3)=>value
	
	start=currentTimeMillis
	
	key=(""+key).replace(" ","_")
	x = Lambda {syn(P(1))}
	error (x.?call(value)==false, "Value not synthesizable")

	CollectionFile(collection).append(key + " "+syn(value))
	
	end=currentTimeMillis
	if(Val("debug",false)) println("[debug] Db2: Set " + collection + " " + (end-start) + " ms")
/Set






# Get data
# --
	P(1)=>collection
	P(2)=>key
	P(3)=>defaultValue
	
	start=currentTimeMillis

	key=(""+key).replace(" ","_")
	coll = CollectionDict(collection)

	if (coll.has(key)) {
		eval(coll.get(key))
	} else {
		defaultValue
	}
	=> result

	end=currentTimeMillis

	if(Val("debug",false)) println("[debug] Db2: Get " + collection + " " + (end-start) + " ms")
	
	result
/Get



# Get keys
# --
	P(1)=>collection
	
	CollectionDict(collection).keys.sort
/Keys



# Show content
# --
	P(1)=>collection
	Keys(collection)->key
		report(collection, key, Get(collection,key))
/Show



# Compress collection
#   # Must only be run when nobody is using the database
# --
	P(1)=>collection
	data=CollectionDict(collection)
	file=CollectionFile(collection)
	file.delete

	data.keys->key
		value=eval(data.get(key))
		Set(collection,key,value)
/CompressCollection

