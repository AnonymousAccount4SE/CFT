# Readme
<<< EOF
-------------------------------------------------
Script file running remote commands via SSH.
Require login without password and sudo without
password (for selected user).  

Also has code for distributing ssh key to remote
servers, to enable ssh without password. If you
have not done so, first create an rsa key, by
running the following command in Linux shell

ssh-keygen -t rsa

Then run the sshEnable function, to copy the
ssh key to remote hosts.

Sudo without password
---------------------
Log in as root, then add the following line to 
/etc/sudoers

<username>  ALL=(ALL) NOPASSWD:ALL

-------------------------------------------------
>>> EOF
/Readme


Input("SSH target on format username@server").get
/ReadSSHTarget


# Open ssh connection to target
# Called via @rsh shortcut
#
P(1,ReadSSHTarget)=sshTarget
    Dir.run("ssh", sshTarget)
/remoteShell


# Copy ssh key to remote target host
P(1,ReadSSHTarget) =sshTarget
    Dir.run("ssh-copy-id",sshTarget)
/sshEnable


# Check if server responds on ping
P(1)=target
    ?(target.contains("@"), target.after("@"), target) =host
    Dir.runCapture("ping","-c","1",host)->line assert(line.contains("0 received")) out(line) | _.length>0 =failure
    !failure
/HostOk


# Returns boolean indicating if sudo without password ok
P(1,ReadSSHTarget) =sshTarget
    sshTarget.before("@")=user
    ?(user == "ubuntu", true, {    # ubuntu on RPI default user has sudo without password ok
        run (sshTarget,"sudo ls",true) =result
        result.get("exitCode") == 0
    })
/VerifySudo




# Create name of temp file under /tmp
P(1)=name 
    Dir("/tmp").file(name + currentTimeMillis)  
/TmpFile



# Single or multiple commands (string or list), returns Dict object
P(1)=target 
P(2)=commands
P(3,false)=acceptErrors
P(4,false)=showDebug

    error(target==null || !target.contains("@"), "Invalid target: '" + target + "'")
    error(commands==null, "Invalid commands: can not be null")

    # ensure commands is a list
    ?(!commands.?nth, {
        List(commands) =commands
    })


    # Add echo command with string to check for later, to avoid login messages etc
    "--- " + Sys.scriptName + ".run ---" =mark
    List('echo "' + mark + '"') + commands =cmd
        
    TmpFile("in") =inFile
    TmpFile("out") =outFile
    TmpFile("err") =errFile
    
    inFile.create(cmd)
    Dir.runProcessWait(inFile,outFile,errFile,"ssh",target)
    
    # Filter stdout to include lines following one containing mark
    false =found
    ?(outFile.exists,outFile.read,List)->line
        condOut(found, line)
        ?(line.contains(mark), {true =found})
    | _=outLines
        
    Dict =result
    result.set("stdout",outLines)
    result.set("stderr",?(errFile.exists,errFile.read,List))
    result.set("stdin",commands)
    result.set("exitCode", Sys.lastEPS)
    
    {* P(1)=f ?(f.exists, f.delete) } =Del
    
    Del.call(inFile)
    Del.call(outFile)
    Del.call(errFile)

    false =FAIL
    ?(result.get("exitCode") != 0 && !acceptErrors, {
        true =FAIL
    })
    
    ?(showDebug || FAIL,{
        println("- target=" + target)
        println("- stdin:")
        commands->line println("    " + line) |

        println("- exitCode = " + result.get("exitCode"))
        println("- stdin:")
        result.get("stdin")->line println("   # " + line) |
        println("- stdout:")
        result.get("stdout")->line println("   # " + line) |
        println("- stderr:")
        result.get("stderr")->line println("   # " + line) |
        println
    })
    
    error(FAIL,"run failed with error: " + target)
    
    # return value
    result
/run


P(1)=target 
P(2)=commands
P(3,false)=acceptErrors
P(4,false)=showDebug
    # ensure commands is a list
    ?(!commands.?nth, {
        List(commands) =commands
    })
    List("sudo bash")+commands =commands
    run(target,commands,acceptErrors,showDebug)
/sudo



