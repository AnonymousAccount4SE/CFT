# Readme
<<< EOF
-------------------------------------------------
Script file running remote commands via SSH.
Require login without password and sudo without
password (for selected user).  

Also has code for distributing ssh key to remote
servers, to enable ssh without password. If you
have not done so, first create an rsa key, by
running the following command in Linux shell

ssh-keygen -t rsa

Then run the sshEnable function, to copy the
ssh key to remote hosts.

Sudo without password
---------------------
Log in as root, then add the following line to 
/etc/sudoers

<username>  ALL=(ALL) NOPASSWD:ALL

-------------------------------------------------
>>> EOF
/Readme


Input("SSH target on format username@server").get
/ReadSSHTarget


# Open ssh connection to target
# Called via @rsh shortcut
#
P(1,ReadSSHTarget) =>sshTarget
    Dir.run("ssh", sshTarget)
/remoteShell


# Copy ssh key to remote target host
P(1,ReadSSHTarget) =>sshTarget
    Dir.run("ssh-copy-id",sshTarget)
/sshEnable


# Check if server responds on ping
P(1) =>target
    if(target.contains("@"), target.after("@"), target) =>host
    Dir.runCapture("ping","-c","1",host)->line 
        assert(line.contains("0 received")) out(line) 
    | _.length>0 =>failure

    !failure
/HostOk


# Check if ok with SSH
P(1) =>target
    run(target,"ls",true).get("exitCode")==0
/HostOkSSH


# Returns boolean indicating if sudo without password ok
P(1,ReadSSHTarget) =>sshTarget
	sudo(sshTarget,"ls",true).get("exitCode")==0
/VerifySudo




# Create name of temp file under /tmp
P(1) =>name 
    Dir("/tmp").file(name + currentTimeMillis)  
/TmpFile



# Run single or multiple commands (string or list) on remote target via SSH, returns Dict object
#
P(1) => target 
P(2) => commands
P(3,false) => acceptErrors
P(4,false) => showDebug

    error(target==null || !target.contains("@"), "Invalid target: '" + target + "'")
    error(commands==null, "Invalid commands: can not be null")

    # ensure commands is a list
    if(getType(commands) != "List") {
        commands = List(commands)
    }


    # Add echo command with string to check for later, to strip away login messages etc
    "--- Output-mark: " + Date + " - " + Sys.scriptName + ".run ---" => mark
    List('echo "' + mark + '"') + commands => cmd
        
    result = call "Lib:run" (List("ssh",target), cmd, acceptErrors, false)

    # Modify stdout, by only including lines following the mark

    found = false
    result.get("stdout")->line
        condOut(found, line)
        if (line.contains(mark)) {
            found=true
        }
    | _ =>outLines
    result.set("stdout",outLines) # overwrite

    if (showDebug) Inner {
		println("- cmd:")
		result.get("cmd")->line println("    " + line) |

		println("- exitCode = " + result.get("exitCode"))

		println("- stdin:")
		result.get("stdin")->line println("   # " + line) |

		println("- stdout:")
		result.get("stdout")->line println("   # " + line) |

		println("- stderr:")
		result.get("stderr")->line println("   # " + line) |
		println
    }

    # return value
    result
/run


P(1) =>target 
P(2) =>commands
P(3,false) =>acceptErrors
P(4,false) =>showDebug
    # ensure commands is a list
    if(getType(commands)!="List") {
        List(commands) =>commands
    }
    
    List("sudo bash")+commands =>commands
    run(target,commands,acceptErrors,showDebug)
/sudo



