
# Show content of dictionary
# --
P(1)=>dict
	dict.keys.sort->key
		report(key,dict.get(key))
/ShowDict


# Create / access counter
# --
P(1) => name
P(2,9999999999999999) => maxValue
	error(name==null,"P(1) name missing")
	
	id="counter:"+(name.replace(" ","_"))
	i = Db2:Get("Util", id, 0)
	
	next=(i+1) % maxValue
	Db2:Set("Util",id,next)
	i
/Counter
	



# Set time mark
# --
P(1) => name
	id="timemark:"+(name.replace(" ","_"))
	Db2:Set("Util", id, Date)
/SetTimeMark



# Check time mark 
# --
P(1) => name
P(2,3600) => seconds
	Date.sub(Date.Duration.seconds(seconds)) => limit

	id="timemark:"+((""+name).replace(" ","_"))
	val = Db2:Get("Util", id)

	val==null || val.before(limit)
/HasTimedOut
	


# Get time mark
# --
P(1) => name
	id="timemark:"+((""+name).replace(" ","_"))
	val = Db2:Get("Util",id)
	if (val==null) val=Date
	val
/GetTimeMark




# Show file without comment lines
# --
P(1) => file
P(2,"#") => commentStart
	file.read->line
		s=line.trim
		reject(s.startsWith(commentStart) || s=="")
		out(line)
/UncommentFile


# Select file from directory
# --
P(1) => dir
P(2,"*") => globPattern
	i=0
	files = dir.files(Glob(globPattern))
	files->f 
		println(""+i + ": " + f.name)
		i=i+1
	|
	result=null
	tryCatch({
		readLine("Enter index / blank for none").parseInt => i
		result=files.nth(i)
	})
	result
/SelectFile



# Process monitor : object to limit number of simultaneously active processes
#
# Example of use
#
#   # --- create monitor object, set limit of active running processes
#   mon = Util:ProcessMonitor
#   limit = 4 
# 
#   # --- when about to start a process
#   mon.Lwait.call(limit)
#   proc = SpawnProcess(...)
#   mon.Ladd.call(proc)
#
# --
Dict.set("list",List)
	.set("LcountRunning",Lambda{
		self.list->proc assert(proc.isDone) out(proc) | _.length => completed
		self.list.length-completed
	})
	.set("Lwait",Lambda{P(1)=>limit
		loop
			break(self.LcountRunning.call < limit)
			Sys.sleep(100)
	})
	.set("Ladd",Lambda{P(1)=>proc
		self.list.add(proc)
	})
/ProcessMonitor



# Invoke curl - does not work for jsonData on Windows (but ok on Linux / WSL)
# --
	P(1,"http")=>protocol
	P(2)=>HostPort
	P(3,"GET") => method
	P(4,error("path required"))=>path
	P(5) => jsonData
	P(6,false)=>verbose
	
	
	cmd=List("curl","-X",method)
	if (jsonData != null) {
		cmd.add("--header")
		cmd.add("Content-Type: application/json")
	}

	if (!protocol.endsWith(":")) protocol=protocol+":"
	if (!protocol.endsWith("//")) protocol=protocol+"//"
	
	url=protocol + HostPort + path
	cmd.add(url)
	if (jsonData != null) {
		cmd.add("-d")
		cmd.add(if (getType(jsonData)=="String", jsonData, JSON:Export(jsonData)) )
	}
	if (verbose) {
		println
		Inner {
			cmd->x println("% " + x)
		}
		println
	}
	result = Lib:run(cmd)
	if (verbose) {
		println("exitCode = " + result.exitCode)
		{result.stdout->line println("(out) " + line)}
		{result.stderr->line println("(err) " + line)}
	}
	result
/CURL
