File("/home/roar/Prosjekter/Java/Geocaching/Words/nsf2016.txt").encoding("UTF-8").protect
/WordsFile

"TORGKVARTALET" 
/Letters

# Create matchDict
# --
	dict=Dict
	Letters.toLower.chars->c
		dict.set(c,dict.get(c,0)+1)
	|
	dict
/MatchDict



# Verify dictionary
# --
	P(1,MatchDict) => dict
	dict.keys.sort->key
		report(key,dict.get(key))
/ShowDict


# Count matches in single line
# --
	P(1) => mdict
	P(2) => line
	
	matches=0
	line.chars->c
		if (mdict.has(c) && mdict.get(c) > 0) {
			matches=matches+1
			mdict.set(c,mdict.get(c)-1)
		}
	|
	matches
/CountMatches


# Result is written to this file
File("WSout.txt")
/ResultFile

# Check for matches
# --
	P(1,Input("Enter lower limit of matches").get.parseInt) => limit
	
	Lib.Files.LineReader(WordsFile).start => reader
	count=0
	loop
		line = reader.read
		break(line==null)
		count=count+1
		if (count % 10000 == 0) {
			println(""+count)
		}
		md=MatchDict
		matches = CountMatches(md,line)
		if (line.length > Letters.length) {
			 matches = matches - (line.length-Letters.length)
		}
		#Inner{
		#	md.keys->c matches=matches-md.get(c)
		#}
		if (matches >= limit) {
			s=("   "+matches).last(3)
			println(s + " " + line)
			ResultFile.append(s+" " + line)
	 	}
/run



# Simple check for matches
# --
	P(1,Input("Part of word").get).toLower => pattern
	
	Lib.Files.LineReader(WordsFile).start => reader
	count=0
	loop
		line = reader.read
		break(line==null)
		count=count+1
		if (count % 10000 == 0) {
			println(""+count)
		}
		assert(line.contains(pattern))
		out(line)	
/Find


