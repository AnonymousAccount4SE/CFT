# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



# Readme for script
<<< EOF
---------------------------------------------------
This script manages git both locally and remotely,
and contains three major functions:

Add, Commit and Push.
---------------------------------------------------
>>> EOF
/Readme




# Edit file (defaults to savefile)
P(1,savefile) =file
	call "Lib:e" (file)
/e



# Project home directory
	savefile.dir.sub("..")
/HomeDir


# Update the Overview.txt file
call "Overview:CreateOverview"
{* call "MD:Run" }.?call
/CreateOverview



# Move save files from CFT home dir (which is the work dir) then run GIT add before restoring  files
# Lib and example files are stored in code.lib and code.examples
# ---
#
	# Identify savefiles to move to TargetDir
	HomeDir.files(Glob("savefile*")) =FilesToMove

	# Create temp-dir
    Dir("/tmp/release"+currentTimeMillis) =d
    when (!d.exists, d.create)
    d =TempDir

	# Move files to TempDir
    FilesToMove->f
        println("Copying file " + f.name + " to " + TempDir.path)
        when (!TempDir.copy(f), error("Failed to copy file"))
        println("Deleting file " + f.name)
        f.delete
    |

	# Run git
    HomeDir.run("git","add",".")
    GitStatus

	# Restore files
    TempDir.files->f
        println("Restoring file " + f.name)
        when (!HomeDir.copy(f), error("Failed to restore file from " + TempDir.path))
        f.delete
    |

	# Delete temp-dir (should be empty)
	println("Deleting temp dir " + d.path)
	d.delete
/Add



# Commit changes
	GitStatus
	Input("Commit message?").get =msg
	HomeDir.run("git","commit","-m",msg)
/Commit


# Push latest commits
	HomeDir.run("git","push","origin","master")
/Push





# Git status
	HomeDir.run("git","status")
/GitStatus




# Git diff
	HomeDir.run("git","diff")
/GitDiff



GitStatus
/gs


GitDiff
/gd


