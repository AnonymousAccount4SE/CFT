# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
--------------------------------------------------------------------

Docker

--------------------------------------------------------------------
>>> EOF
/Readme

/Interactively run command
	P(1)=>cmd
	if(cmd==null) {
		println("Enter command")
		readLine=>cmd
	}
	Run(cmd)
/i


# Run command string (must split correctly)
P(1,"dir") =>cmd
    println("---> " + cmd)
    Dir.run(cmd.split)
/Run

# Create or update project data
	P(1,Dir)=>dir
	Input("Docker image title").get => title
	Dict
		.set("dir",dir)
		.set("title",title)
		=> data
	Db2:Set("Docker","Project",data)
	dir.path
/SetProject

# Get project data
	data = Db2:Get("Docker","Project")
	error(data==null,"Call SetProject() first, either with project dir current, or as parameter")
	data
/GetProject



# List docker containers
Run("docker container list")
/CList

# List docker images
Run("docker image list")
/IList

# List docker processes
Run("docker ps -a")
/ps

# Delete docker processes by image name
P(1)=>proc
	if(proc==null) {
		ps
		Input("Remove docker process ('*' for all)").get => proc
	}
	Dir.runCapture("docker", "ps", "-a")->line
		line.split=>cols
		assert(proc=="*" || cols.nth(1)==proc)
		cols.last => name
		Run("docker stop " + name)
		Run("docker rm " + name)
/rm

# Remove processes for project
	p=GetProject
	rm(p.title)  # if exists
/PRm


# Create project image
	p=GetProject
	p.dir.run("cmd","/c","docker","build","-t",p.title,".")
	IList
/PBuildImage

# Run project in detached mode (see Dockerfile for command to run)
	PRm
	p=GetProject
	cmd=List("cmd","/c","docker","run","-d","--name",p.title+"_running",p.title)
	Lib:run(cmd)
/PRunDetach



# Run full rebuild, then run interactive bash to examine image
	PRm
	PBuildImage
	p=GetProject
	cmd=List("docker","run","-it","--publish", "8080:8080", "--name", p.title+"_running", p.title, "bash")
	Dir.run(cmd)
/bash



