# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
--------------------------------------------------------------------
Docker management

Linux: run as root

Move to project directory (with Dockerfile)
Run SetProject

Check or create the RUNOPTS.txt file
PBuildImage

run or test
--------------------------------------------------------------------
>>> EOF
/Readme


# Run command list or string (must split correctly)
P(1) => cmd
	if (getType(cmd)=="List") {
		println("---> " + cmd.concat(" "))
		Dir.run(cmd)
	} else {
		println("---> " + cmd)
		Dir.run(cmd.split)
	}
/Run

# Create or update project data
	P(1,Dir)=>dir
	error(!Dir.file("Dockerfile").exists,"Project dir must contain Dockerfile")
	Dict
		.set("dir",dir)
		.set("title",dir.name.toLower)
		=> data
	Db2:Set("Docker","Project",data)
	dir.path
/SetProject


# Get project data
	data = Db2:Get("Docker","Project")
	error(data==null,"Call SetProject() first, either with project dir current, or as parameter")
	data
/GetProject




# Show project
	p=GetProject
	println
	println("title =   " + p.title)
	println("dir   =   " + p.dir.path)
	println
	"ok"
/ShowProject
	

# Get app dir
# --
	GetProject.dir.sub("app")
/AppDir


# List docker containers
Run("docker container list")
/CList

# List docker images
Run("docker image list")
/IList

# List docker processes
Run("docker ps -a")
/ps

# Delete docker processes by image name
P(1)=>proc
	if(proc==null) {
		ps
		Input("Remove docker process ('*' for all)").get => proc
	}
	Dir.runCapture("docker", "ps", "-a")->line
		line.split=>cols
		assert(proc=="*" || cols.nth(1)==proc)
		cols.last => name
		Run("docker stop " + name)
		Run("docker rm " + name)
/rm

# Delete all docker images
# --
	Dir.runCapture("docker","image","ls")->line
		line.split => cols
		cols.nth(2) => id
		reject(id=="IMAGE")  # header
		Run("docker rmi " + id)
/ClearImages

# Remove processes for project
# --
	p=GetProject
	rm(p.title)  # if exists
/PRm


# Create project image
# --
	p=GetProject
	error(!p.dir.file("Dockerfile").exists,"No Dockerfile in project dir: " + p.dir.path)
	cmd=List("docker","build","-t",p.title,".")
	println("---> " + cmd.concat(" "))
	p.dir.run(cmd)
	IList
/PBuildImage



# Get run options from file RUNOPTS.txt if found (contains code lines)
# --
	GetProject.dir.file("RUNOPTS.txt") =>f
	if (f.exists) Inner {
		f.read->line
			assert(line.trim != "")
			assert(!line.startsWith("#"))
			println("-> " + line) 
			eval(line)->element
				out(element)
	} else {
		List
	}
/GetRunOpts


# Do full rebuild, then run in detached mode
# --
	PRm
	PBuildImage
	p=GetProject
	cmd=List("docker","run","-d","--name",p.title+"_running") + GetRunOpts + List(p.title)
	Run(cmd)
/run



# Do full rebuild, then run interactive bash to examine image
# --
	PRm
	PBuildImage
	p=GetProject
	cmd=List("docker","run","-it", "--name", p.title+"_running") + GetRunOpts + List(p.title, "bash")
	Run(cmd)
/test

