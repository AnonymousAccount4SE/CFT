# Readme
# --
<<<< EOF

Common docker commands

IList      - list images
CList      - list containers
IDelete    - delete image
IDeleteAll - remove all images
CDeleteAll - remove all containers

Bash       - run bash shell inside running container

>>>> EOF
	->line println("| " + line)
/Readme


# Restart docker service (on windows)
# 
# - must do this after logging on with VPN,
#   for containers to access servers properly
# --
	Dir.run("powershell","restart-service","*docker*")
/RestartDocker



# Report progress
# --
	Lib:Header(P(1))
//rep


# List docker processes
# --
	Util:Run("docker ps -a")
/ps


# List all containers
# --
	ps
/CList


# List docker images
# --
	Util:Run("docker image list")
/IList

# Select docker image, return IMAGE ID
# --
	P(1,"") => searchTerm

	Lib:Header("Select docker image")
	images = Inner{
		Dir.runCapture("docker","image","list").keep(1)->line # keep(1) to strip header line
			assert(line.contains(searchTerm)) 
			out(line)
	}
	error(images.length==0, "No docker images")

	Inner{
		i=0
		images->img report(i,img)
		i=i+1
	} ->line 
		println(line)
	|
	println
	readLine("Enter pos or blank to abort").trim => x
	error(x=="","Aborted, no docker image selected")
	img = images.nth(x.parseInt)

	# confirm selection
	println(img)
	# isolate image id
	img.split.nth(2)
/SelectImage
	

# Get image line for id
# --
	P(1,SelectImage) => id

	images = Inner{
		Dir.runCapture("docker","image","list").keep(1)->line # keep(1) to strip header line
			assert(line.split.nth(2).startsWith(id))
			out(line)
	}
	error(images.empty, "No image found for id '" + id + "'")
	images.first
//GetImageLine


# Get image repository / local name for id
# --
	P(1,SelectImage) => id
	GetImageLine(id).split.nth(0)
/GetImageRepo


# Get image version for id
# --
	P(1,SelectImage) => id
	GetImageLine(id).split.nth(1)
/GetImageVersion


# Delete specific docker image
# --
	id=SelectImage
	Util:Run("docker image rm " + id)
	IList
/IDelete



# Delete all images (-f)
# --
	Dir.runCapture("docker","image","ls").keep(1)->line
		println(line)
		line.split.nth(2) => id
		Dir.run("docker","image","rm","-f",id)

/IDeleteAll


# Delete all docker containers
# --
	rep("Removing all docker containers")
	Dir.runCapture("docker", "ps", "-a")->line
		line.split=>cols
		reject(cols.last=="NAMES") ## skip header line
		Util:Run("docker stop " + cols.last)
		Util:Run("docker rm -f " + cols.last)
/CDeleteAll



# Attach interactive bash to running container
# --
	CList
	Input("Enter container id").get => id
	Util:Run("docker exec -it " + id + " bash")
/Bash



# Check if docker image exists
# --
	P(1, readLine("Repository (name)")) => name
	P(2, readLine("TAG")) => tag
	Dir.runCapture("docker","image","list")->line
		assert(line.split.nth(0)==name && line.split.nth(1)==tag)
		out(line)
	| _.length > 0
/HasImage
	


# Upload docker image to Sonatype Nexus Repository Manager
# --
	P(1,Input("Nexus host:port").get) => hostPort
	P(2,Docker:SelectImage) => imageId
	P(3,Input("Tag").get) => tag

	Lib:ShowInfo("NOTE: contains confirm before pushing!!")

	repo=Docker:GetImageRepo(imageId)

	if (hostPort.endsWith("/")) hostPort=hostPort.first(hostPort.length-1)
	if (!repo.startsWith("/")) repo="/"+repo

	# creating a version string
	readLine("Version info following date").replace(" ","_") => vInfo
	version = Date.setFormat("yyyy-MM-dd").fmt + "_" + vInfo

	commands=List(
		"docker tag " + tag + " " + hostPort + repo + ":" + version,
		"docker login " + hostPort,
		"docker push " + hostPort + repo + ":" + version
	)

	Lib:Header("About to execute the following commands")
	Inner {commands->cmd println("  " + cmd) }
	
	println
	error(!Lib:Confirm,"Aborting docker push")

	commands->cmd Util:Run(cmd)
/NexusPush
