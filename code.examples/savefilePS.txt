# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Readme for script
<<< EOF

--------------------------------------------------

Scripting PowerShell commands.

Running remote commands with PowerShell.

--------------------------------------------------

>>> EOF
/Readme


# Run PowerShell command on remote host, such as "get-service -name *"
#
# To invoke a remote PowerShell script:  
#   ". c:\temp\myscript.ps1 ..."
# To invoke external program: 
#   "& git status"
# To invoke cmd features: 
#   "& cmd /c dir"
# --
P(1) =>host 
P(2,"get-service") =>code
P(3,List) => stdin
P(4,false) => acceptError
    println("[" + host + "] Executing " + code)
    List("powershell","invoke-command","-computername",host,"-scriptblock","{" + code + "}") =>cmd
    Lib:run(cmd, stdin, acceptError)
/Call



# Run PowerShell command on remote host. Works like Call, but interactively
# --
P(1) =>host 
P(2,"get-service") =>code
    println("[" + host + "] Executing " + code)
    List("powershell","invoke-command","-computername",host,"-scriptblock","{" + code + "}") =>cmd
    Dir.run(cmd)
/CallInteractive


P(1, Input("Enter remote host").get) =>host 
P(2, Input("Enter service").get) =>service
    CallInteractive(host,"stop-service " + service)
/StopService

P(1, Input("Enter remote host").get) =>host 
P(2, Input("Enter service").get) =>service
    CallInteractive(host,"start-service " + service)
/StartService



P(1, Input("Enter remote host").get) =>host 
P(2, Input("Enter service").get) =>service
    CallInteractive(host,"get-service " + service)
/GetService


