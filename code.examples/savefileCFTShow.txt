# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2022 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

<<<<< TEXT
.h CFT

	Dev since May 2018, on git since 2020
    GNU GPL 3.0 ("open source")

	https://github.com/rfo909/CFT

    - Script language
	- Shell

	git clone https://github.com/rfo909/CFT.git
	cd CFT
	mvn package
	.\cft


.h Functions

	1+1
	/two

	Dir.files.length
	/x

	cd ..
	x

	cd

	:save Test

	@e

	3.14
	/pi

	# Parameters (with default expr)
	# --
		a=P(1,Input("Enter a").get.parseInt)
		b=P(2,Input("Enter b").get.parseInt)
		a+b
	/sum

	?


.h Loops 

    # Iterate over content, filter or modify, 
	# use out() to generate result from loop.

	List(1,2,3)->x out(x+10)

	# Loops terminate at end of function or at PIPE character

	"123".chars->c println(c) | println("done")

	# A loop returns a list, which is populated by calls to out()
	# It becomes either function return value or input to next 
	# section. The expression "_" returns that value.


	# Count number of lines of java
	# --
		Dir.allFiles("*.java")->f 
			out(f.read.length) 
		| _.sum
	/javaLines

	# Filter data 
	# --
		List(1,2,3,4)->x
			assert(x%2==0)
			out(x)
	/evenNumbers


.h HELP

	# List functions in current script
	?

	# Show function code
	?sum

	# Global functions
	help

	# Object functions
	Dir help
	Dir.files help
	Dir.files.first help

	# Expressions and statements
	_Expr
	_Stmt

	# List colon commands and shortcuts
	:
	@

	# List scripts
	@scr

	# Show details of another script
	?Lib:
	?Lib:TmpDir


.h Shell

    ls, lsd, lsf
	pwd

	cd
	cd ...
	cd (expr)

    cat, more, edit

    ls
    :N
    edit/cat/more

    @fm

    @S
    @FL

    !dir
    shell



.h Search

    # Projects = Script for searching
    # Multiple projects, each with multiple directories etc
	# Fast switch between projects
    # --

    @P

    EditConfig

    ?
    ch

	# Search
    S, S2, 

	# Locate file(s) and optionally open one in editor
    FL






>>>>> TEXT
//text

# Process line
# --
    P(1) => line
    P(2) => first
	
    if (line.startsWith(".h")) {
        if (!first) {
            readLine("Enter")
        }
        println(Curses:Clear)
        Inner {
            Letters7x5:GetText(line.sub(2).trim)->line 
				str=line #.replace("#","O")
				println(Curses:TxtGreen + str + Curses:Reset)
            |
            println
        }
    } else {
        println(line)
        #Sys.sleep(10)
    }
//ProcessLine


# Show text
# --
    P(1,List) => lines
    first=true
    lines->line 
        ProcessLine(line, first)
        first=false
    |
    "Done"
//Show



# Show text
# --
    Show(text)
/t



