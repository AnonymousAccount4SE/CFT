<<<<< TEXT
.h Intro

	# CFT: "ConfigTool"
	# Dev since May 2018, on git since 2020
	# GNU GPL 3.0 ("open source")
	# --

	## Function names follow function body

	1+1
	/two

	?
	
	## Local variables

	a=two+two  a
	two+two =>a  a

	## Foreach loop is a single arrow plus loop variable

	List(1,2,3)->x out("a"+x)
	Dir.files->f out(f.path)
	Dir.files->f report(f.name, f.length)

	## Filtering

	Dir.files->f assert(f.name.endsWith(".md")) out(f)
	Dir.files->f reject(f.name.endsWith(".txt")) out(f)



.h help


	# Interactive help
	# --

	help
	_Stmt
	_Expr

	Dir help
	File("x") help

	"" help
	2 help
	List help
	Dict help


.h Functions

	# No global variables
	# No custom classes
	# --

	Dir.allFiles(Glob("*.java"))
	/JavaFiles

	JavaFiles.length
	/CountJavaFiles
	
	:save Demo

	@
	@e

	JavaFiles->f out(f.read.length) | _.sum
	/JavaLines





.h Search

	# Projects = Script for searching
	# Multiple projects, fast switching
	# --

	@
	@P

	?
	ch

	S
	FL

	EditConfig



.h Shell

	ls, lsd, lsf

	cat, more, edit

	ls
	:N
	edit/cat/more

	@fm

	@S
	@FL

	!dir
	shell



.h Templates

	:save Demo
	@e
	
	# Create notification
	# --
		P(1,readLine("name"))=>name

		Sequence(
			@ Dear <<name>>
			@
			@ Your visa has expired
		).mergeExpr
	/test2



>>>>> TEXT
//text



# Process line
# --
	P(1) => line
	P(2) => first
	if (line.startsWith(".h")) {
		if (!first) {
			readLine("Enter")
		}
		println(Curses:Clear)
		Inner {
			Letters7x5:GetText(line.sub(2).trim.toUpper)->line println(line)
			|
			println
		}
	} else {
		println(line)
		Sys.sleep(10)
	}
//ProcessLine


# Show text
# --
	P(1,List) => lines
	first=true
	lines->line 
		ProcessLine(line, first)
		first=false
	|
	"Done"
//Show



# Show text
# --
	Show(text)
/t



