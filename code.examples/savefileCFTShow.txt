<<<<< EOF
.h Intro

	# CFT: "ConfigTool"
	# Dev since May 2018, on git since 2020
	# --


	## Function names follow function body

	1+1
	/two
	
	## Assignment takes two forms

	a = expr
	expr => a

	## Foreach loop is a single arrow plus loop variable

	List(1,2,3)->x out("a"+x)

	Dir.files->f out(f.path)

	## Filtering

	List(1,2,3,4)->x assert(x%2==0) out(x)

	Dir.files->f reject(f.name.startsWith("savefile")) out(f)



.h help


	# Interactive help
	# --

	help
	_Stmt
	_Expr

	Dir help
	File("x") help

	"" help
	2 help
	List help
	Dict help


.h Scripts

	# Functions only, no global variables
	# No custom classes
	# --

	Dir.allFiles(Glob("*.java"))
	/JavaFiles

	JavaFiles.length
	
	:save Demo

	## Shortcuts

	@
	@e



.h Iteration

	# Iteration over lists 
	# PIPE
	# --

	JavaFiles->f out(f.length) | =>x x.sum
	JavaFiles->f out(f.read.length) | _.sum

	x=1 loop out(x) x=x+1 break(x>10)	
	/Numbers

	:save Demo

	## Shortcuts

	$ @
	$ @e

	# Generate numbers from 1
	# --
		P(1,10)=>limit
		x=1 loop out(x) x=x+1 break(x>limit)	
	/Numbers

	# Alt.
	
	Lib.Data.each(1,10)


.h Projects

	# Script for searching
	# Multiple projects, fast switching
	# --

	@
	@P

	?
	ch

	S
	FL

	EditConfig


.h Shell

	ls, lsd, lsf

	cat, more, edit

	ls
	:N
	edit/cat/more

	@fm

	@S
	@FL

	$ !dir
	$ shell

.h Advanced

	## Loop control with PIPE

	Dir.files->f out(f.length) | _.sum

	- Whenever there are loops: collect values from out() as result
	- The PIPE terminates all current loops

	- Splits code into "code spaces"

	- Result from one code space is put on stack in next code space

	- Inner blocks
		- separate code space

	:save Demo
	@e

.h Example

	Dir.allFiles(Glob("*.java"))
	/JavaFiles


	# List files containing pattern
	# --
		pattern=readLine("Pattern")
		JavaFiles->f
			containsPattern=Inner{
				f.read->line 
					if(line.contains(pattern)) out(line) 
				| _=>list

				# return value
				!list.empty
			}
			assert(containsPattern)
			out(f)
	/Contains

	## Without "Inner", the out(line) would add to the result from Contains()

	## Inefficient ...

.h Improved

	# List files containing pattern
	# --
		pattern=readLine("Pattern")
		grep=Grep(pattern).limitFirst(1)

		JavaFiles->f
			containsPattern=grep.fileCount(f)>0
			assert(containsPattern)
			out(f)
	/Contains





>>>>> EOF
//text



# Process line
# --
	P(1) => line
	P(2) => first
	if (line.startsWith(".h")) {
		if (!first) {
			readLine("Enter")
		}
		println(Curses:Clear)
		Inner {
			Letters7x5:GetText(line.sub(2).trim.toUpper)->line println(line)
			|
			println
		}
	} else {
		println(line)
	}
//ProcessLine


# Show text
# --
	P(1,List) => lines
	first=true
	lines->line 
		ProcessLine(line, first)
		first=false
	|
	"Done"
//Show



# Show text
# --
	Show(text)
/t



