<<<<< EOF
.h Specials

	- Function names follow function body

	1+1
	/two
	
	- Assignment takes two forms

	a = expr
	expr => a

	- Foreach loop is a single arrow plus loop variable

	List(1,2,3)->x out("a"+x)

	Dir.files->f out(f.path)


.h CFT Intro

	** "CFT" = "ConfigTool"

	** Functions only, no global variables
	** Interactive help system

	$ 2+3
	$ help

	$ Dir help
	$ File("x") help

	$ "" help
	$ _Stmt
	$ _Expr

	$ Dir.files
	$ Dir.dirs

	$ Dir.allFiles(Glob("*.java"))
	$ /JavaFiles

	$ JavaFiles
	$ ?

	$ JavaFiles.length

.h Iteration

	** Iteration over lists

	JavaFiles->f out(f.length) | =>x x.sum
	JavaFiles->f out(f.read.length) | _.sum

	:save Demo

	** Shortcuts

	$ @
	$ @e

	----
	# Search
	# --
		term=Input("Enter search term").get
		grep=Grep(term)
		JavaFiles->f
			grep.file(f)->line
				report(line.file.name, line.lineNumber, line)
	/S
	----

	$ ?
	$ S


.h Projects

	** Script for searching

	$ @P

	$ ch

	$ S
	$ FL
	
	$ EditConfig

.h Shell

	ls, lsd, lsf

	cat, more, edit

	ls
	:N
	edit/cat/more

	@fm

	@S
	@FL

	$ !dir
	$ shell

.h Advanced

	** Made for interactive use

	Dir.files->f out(f.length) | _.sum

	- Whenever there are loops: collect values from out() as result
	- The PIPE limits loop body

	- Splits code into "code spaces"

	- Result from one code space is put on stack in next code space

	3 | =>x x+1

	- Inner blocks
		- separate code space

	:save Demo
	@e

.h Example

	Dir.allFiles(Glob("*.java"))
	/JavaFiles


	# List files containing pattern
	# --
		pattern=readLine("Pattern")
		JavaFiles->f
			containsPattern=Inner{
				f.read->line 
					if(line.contains(pattern)) out(line) 
				| _=>list

				# return value
				!list.empty
			}
			assert(containsPattern)
			out(f)
	/Contains

	** Without "Inner", the out(line) would add to the result from Contains()

	** Inefficient ...

.h Improved

	# List files containing pattern
	# --
		pattern=readLine("Pattern")
		grep=Grep(pattern).limitFirst(1)

		JavaFiles->f
			containsPattern=grep.fileCount(f)>0
			assert(containsPattern)
			out(f)
	/Contains

>>>>> EOF
//text



# Process line
# --
	P(1) => line
	P(2) => first
	if (line.startsWith(".h")) {
		if (!first) {
			readLine("Enter")
		}
		println(Curses:Clear)
		Inner {
			Letters7x5:GetText(line.sub(2).trim.toUpper)->line println(line)
			|
			println
		}
	} else {
		println(line)
	}
//ProcessLine


# Show text
# --
	P(1,List) => lines
	first=true
	lines->line 
		ProcessLine(line, first)
		first=false
	|
	"Done"
//Show



# Show text
# --
	Show(text)
/t



