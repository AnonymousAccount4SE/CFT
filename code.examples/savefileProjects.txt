# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License




# Example projects.txt file
<<< EOF

Projects script
---------------
To use this script, create the file projects.txt
in the CFT home directory.

The ### marker is followed by a project name,
and identifies the settings for each project.

Example:

projects.txt
---
### ActiveProjects

CFT

### CFT

Desc: CFT project

Dir: /home/roar/Prosjekter/Java/CFT
Type: java
Type: txt 
IgnoreDir: build
IgnoreDir: ebuild 
IgnoreFile: .git 
---

There can be multiples of every line, including Dir.

>>> EOF
->line println(line) # avoid line numbers, for easy copy/paste
/Readme







# Open script file in editor
edit (savefile)
/e

# Set up screen dimensions
	Cfg.w(130) Cfg.h(25)
/Init

# projects.txt file contains all data
	DataFile(File("projects.txt"),"###")
/ProjectsFile

# List projects and select 
	Val("Project") =result
	ProjectsFile.get("ActiveProjects")->line out(line.trim) | _=names
	{* P(1) } =showName
	loop
		println
		call "Lib:Header" ("Select project, curr=" + result)
		call "Lib:ShowOptions" (names, showName)
		call "Lib:SelectOptions" (names, showName, true) =resultList
		when(resultList.length>1, {println("** not unique **") null=result} )
		when(resultList.length==1, {resultList.nth =result} )
		break(result != null)
	|
	ValDef("Project", result)
/ChangeProject

ChangeProject
/CP


when (Val("Project")==null, ChangeProject)
/CheckProject

# Read current project data into a Dict
	CheckProject
	Dict
		.set("Desc",List)
		.set("Dir",List)
		.set("Type",List)
		.set("IgnoreDir",List)
		.set("IgnoreFile",List)
		=dict

	Val("Project") =pName
	ProjectsFile.get(pName) =dataLines
	error(dataLines.length==0, "No data for project " + pName)

	dataLines->line
		line.before(":").trim =field
		line.after(":").trim =val
		dict.get(field,List).add(val)
	|
	dict
/CurrProject

# Display current project
	CheckProject
	
	CurrProject =pr
	println
	pr.Desc->d
		println("** " + d)
	|
	pr.Dir->d
		println("   " + d)
	|
	println("   " + pr.Type.concat(" "))
	println
	true
/CP


# Produce list of files to search
	CheckProject
	CurrProject =pr
	pr.Dir->dirName
		assert({
			true =keep
			pr.IgnoreDir->x 
				when(dirName.contains(x), {false=keep})
				break (!keep)
			|
			keep
		})
		Dir(dirName).allFiles->f
			#println("Checking file " + f.path)
			f.name.afterLast(".")=type
			assert(pr.Type.contains(type))
			assert({
				true =keep
				pr.IgnoreFile->xx
					when(f.name==xx, {false =keep})
					break(!keep)
				|
				keep
			})
			out(f)
/TextFiles


TextFiles
/TF





P(1,Grep)=grep
	CheckProject
	
	{* P(1)=file 
		Val("FileFilter")=filter
		if (filter != null, file.name.contains(filter), true)
	} =filter

	# Count matches first
	TextFiles->tf 
		assert(filter.call(tf))
		#out(grep.fileCount(tf)) 
		out(0)
	| _.sum =count
	# If too many hits, just cancel
	error(count>10000, "Search matches " + count + " lines - not shown")

	TextFiles->tf
		assert(filter.call(tf))
		grep.file(tf)->line 
			report(line.file.name, line.lineNumber, line)
/Search


# Verify current FileFilter
	CheckProject

	Val("FileFilter") =filter
	if(filter==null, "No filter", "Filtering on " + filter) =msg
	println
	println("The file filter, if defined, is a string value.")
	println("Processing files, if file filter is defined, only files")
	println("with names that contain the filter string, are included.")
	println("To clear the filter, type 'clear' and press Enter.")
	println
	println(msg)
	println
	readLine("Enter filter (blank to keep current)") =inp
	if(inp.trim=="", filter, inp.trim) =filter
	ValDef("FileFilter", filter)
	"File filter = " + filter
/VerifyFilter


# Clear current file filter
ValDef("FileFilter",null)
"File filter cleared"
/ClearFilter


ClearFilter
/clear


# Search with one parameter
CheckProject
VerifyFilter
Input("Search1").get =a
Search(Grep(a))
/S


# Search with two parameters
CheckProject
VerifyFilter
Input("Search2a ... ").get =a
Input("... AND Search2b").get =b
Search(Grep.match(a).match(b))
/S2


# Search with three parameters
CheckProject
VerifyFilter
Input("Search3a ... ").get=a
Input("... AND Search3b").get=b
Input("... AND Search3c").get=c
/S3


# Locate file by partial name
	P(1,"java")=fn
	CheckProject

	TextFiles->tf
		assert(tf.name.contains(fn))
		out(tf)
/FileLocator

# Interactive call to FileLocator, sorted presentation, newest first
	CheckProject
	
	Input("Enter part of file name").get =fn
	FileLocator(fn) =fileList
	fileList->file
		out(Int(file.lastModified, file))
	| _.sort->x 
		x.data =file 
		report(file.path, file.length, Date(file.lastModified).fmt)
	| =lines
	# The report lines are data which we now display
	0 =lineNo
	lines->line
		{""+lineNo =s loop break(s.length>=3) " "+s =s | s} =lineNoStr
		println(lineNoStr + ": " + line)
		lineNo+1 =lineNo
	|
	println
	readLine("Enter number to edit, or blank to skip") =inp
	when(inp != "", {
		call "Lib:e" (fileList.nth(inp.parseInt))
	})
	true
/FL


