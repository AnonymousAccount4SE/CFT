# Initialize web server on port 2500 - for testing
# --

	Lib.Web.Server(2500).RootContext => Root   # The "/" path
	
	Root.Context("my.css","text/css")
		.GET(Lambda{
			Sequence(
				@ * {font-family: courier}
				@ body {background-color:#AAFF99}
			)
	})
		
	Root.GET(Lambda{
		Sequence(
			@ <<BodyStart>>
			@ <h3>Menu</h3>
			@ <p>
			@ <a href="/text">/text</a> (text/plain test)<br/>
			@ </p>
			@ <p>
			@ <a href="/status">/status</a><br/>
			@ </p>
			@ <p>
			@ <a href="/formtest">/formtest</a><br/>
			@ </p>
			@ <<BodyEnd>>
		) -> line 
			line.mergeExpr->s out(s)
	})
		
	Root.Context("text","text/plain").GET(Lambda{
		files=Lambda{
			Dir.files->f report(f.name, f.length)
		}
		Sequence(
			#@ <<BodyStart>>
			#@ <h1>Plain text test</h1>
			@ <<files.call>>
			#@ <<BodyEnd>>
		) -> line
			line.mergeExpr->s out(s)
	})
	Root.Context("status")
		.GET(Lambda{
			P(1)=>requestObj
			headers=Lambda{
				P(1)=>requestObj
				Util:ShowDict(requestObj.headers)->line out(line+"<br/>")
			}
			Sequence(
				@ <<BodyStart>>
				@ <h1>Headers</h1>
				@ <<headers.call(requestObj)>>
				@ <<BodyEnd>>
			) -> line
				line.mergeExpr->s out(s)
		})

	Root.Context("formtest")
		.GET(Lambda{
			P(1)=>requestObj
			Sequence(
				@ <<BodyStart>>
				@ <h1>Formtest</h1>
				@ <form action="/formtest" method="POST">
				@ <input name="a"/>
				@ <input name="b"/>
				@ <input type="submit" value="Submit">
				@ </form>
				@ <<BodyEnd>>
			) -> line
				line.mergeExpr->s out(s)
		})
		.POST(Lambda{
			P(1)=>requestObj
			
			body=requestObj.body
			if (body != null) {
				# binary
				body=body.toString("UTF-8")
			}
			Sequence(
				@ <<BodyStart>>
				@ <h1>Form POST</h1>
				@ <<ShowRequest(requestObj)>>
				@ <<BodyEnd>>
			)->line
				line.mergeExpr->s out(s)
		})
/Init




# Open Body 
# --
	Sequence(
			@ <html>
			@ <head>
			@ 	<meta charset="utf-8"/>
			@ 	<link rel="stylesheet" href="/my.css">
			@ </head>
			@ <body>
	)
//BodyStart


# Close Body 
# --
	Sequence(
		@ </body>
		@ </html>
	)
//BodyEnd


# Show all data from Request object
# --
	P(1) => req
	
	body=req.body
	if (body==null) {
		body="null"
	} else {
		# Binary value
		body=body.hex
		if (body.length > 50) body=body.sub(0,40) + "..."
	}
	Sequence(
		@ <h2>.headers</h2>
		@ <<ShowDict(req.headers)>>
		@ <h2>.method</h2>
		@ <<req.method>><br>
		@ <h2>.url</h2>
		@ <<req.url>><br/>
		@ <h2>.urlParams</h2>
		@ <<ShowDict(req.urlParams)>>
		@ <h2>.body</h2>
		@ <<body>><br/>
		@ <h2>.bodyParams</h2>
		@ <<ShowDict(req.bodyParams)>>
	) -> line
		line.mergeExpr->s out(s)
//ShowRequest


# Show dictionary
# --
	P(1)=>dict
	dict.keys->key
		out(""+key + ": " + dict.get(key) + "<br/>")
//ShowDict

