

Input("Enter ssh target on format user@host").get
/GetSSHTarget


# Run Update and Upgrade on target, unless it has been updated within 20 hours
# Returns Dict to be stored in database
# --
P(1,GetSSHTarget) =>target
P(2,36) => hoursSinceLast

    println("APT update and upgrade")

    error(!target.contains("@"), "Invalid target: " + target)

    error(!SSH:HostOkSSH(target),"Target " + target + " not responding")

    target.after("@") =>host
	tMark=Sys.scriptName+".lastrun."+host
	if (Util:HasTimedOut(tMark, hoursSinceLast*3600)) {

		println("Performing update")
		result = SSH:sudo(target,"apt-get -y update", true)

		FAIL = result.get("exitCode") != 0 
		if (FAIL) Inner {
			Lib:Header("Update failed")
			result.stdout->line println(line) |
			result.stdout->line println("##ERR## " + line)
		} 

	   	if (!FAIL) {
	        println("Performing upgrade")
	        SSH:sudo(target,"apt-get -y upgrade", true) =>result
	        FAIL = result.get("exitCode") != 0 
			if (FAIL) Inner {
				Lib:HEader("Upgrade failed")
				result.stdout->line println(line) |
				result.stdout->line println("##ERR## " + line)
			} 
	   	}

	   	if (!FAIL) {
	   		Util:SetTimeMark(tMark)
	   	}
	} else {
		println("Ignoring: last checked on " + Util:GetTimeMark(tMark).fmt)
	}
/run

