# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
-------------------------------------------------------------------
Creating an investigation log when working with finding out why
a system behaves as it does. Uses Sys.lastResult to obtain
data.

To start new log or save existing, just open the LogFile
in an editor.
-------------------------------------------------------------------
>>> EOF
/Readme




# file to append investigation data to
    Date.setFormat("yyyy-MM-dd").fmt =>today
    Sys.homeDir.sub("investigate.d") =>dir
    if(!dir.exists, dir.create)
    # return value
    dir.file(today+".txt")
/LogFile



# Input mode
loop
    readLine("Enter text, '..' to quit or '..h' for help").trim =>line
    false =>terminate
    false =>done
    if(line=="",Inner{LogFile.append("")})
    reject(line=="")

    if(line.startsWith(".."), Inner{
        line.sub(2) =>cmd
        if(cmd.startsWith("h"), Inner{ ## help
            println
            println
            println("---")
            println(".xxx              - read pasted input lines, with end-marker 'xxx'")
            println(".                 - read pasted input lines, with end-marker '.'")
            println("..h               - help, this page")
            println("..c               - show log file (cat)")
            println("..m               - show log file (more)")
            println("..e               - edit log file")
            println("..                - quit")
            println("---")
            println
            true =>done
        })
        if(cmd.startsWith("c"),Inner{  ## cat
            Inner{LogFile.read->line println(line)}
            true =>done
        })
        if(cmd.startsWith("m"),Inner{ ## more
            Lib:m (LogFile)
            true =>done
        })
        if(cmd.startsWith("e"),Inner{ ## edit
            Edit
            true =>done
        })
        if(cmd=="",Inner{ ## quit
            true =>terminate
        })
    })
    break(terminate)
    assert(!done)
    (line.startsWith(".."))
    if(line.startsWith("."), Inner{
        line.sub(1) =>marker

        # basic sanity checking
        if(marker.startsWith(".") || marker.length>10,  Inner{
            println("Invalid end marker: '" + marker + "'")
        }, Inner{
            if(marker=="",".",marker) =>marker
            println("End-marker: '" + marker + "'")
            println("---")
            readLines(marker) =>lines
            List =>list
            list.add("")
            Inner{lines->line list.add("# " + line)}
            list.add("")
            LogFile.append(list)
        })
    },Inner{
        LogFile.append(Date.fmt + " " + line)
    })
/InputMode




# Log data
    Sys.lastResult =>res
    getType(res)=="List" =>isList

    if(isList) {
        readLine("Element number (Enter for all)") =>num
        if(num.?parseInt) {res.nth(num.parseInt) =>res}
    }

    List =>list
    list.add("")    
    res->x 
        list.add("# " +x) 
    |
    list.add("")
    LogFile.append(list)
/LogData


# Log text
    List("","D:"+Date.fmt) =>list

    readLine("Comment") =>line
    LogFile.append(Date.fmt + " " + line)
/LogText


# Log pasted text
    readLine("Type end marker, or just press Enter to use '.'").trim =>endMarker
    if(endMarker=="",".",endMarker) =>endMarker
    println("End-marker: '" + endMarker + "'")
    println("---")
    readLines(endMarker) =>lines
    
    List =>list
    list.add("")
    lines->line list.add("# " + line) |
    list.add("")
    LogFile.append(list)
/LogPastedText



LogFile.read->line println(line)
/Show

Lib:e (LogFile)
/Edit

