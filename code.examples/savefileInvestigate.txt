# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2023 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Readme
<<< EOF
-------------------------------------------------------------------
Creating an investigation log when working with finding out why
a system behaves as it does. Uses Sys.lastResult to obtain
data.

To start new log or save existing, just open the LogFile
in an editor.
-------------------------------------------------------------------
>>> EOF
/Readme


# Create header as list of lines
# --
    P(1,"Header") => header
    P(2,"-") => lineChar
    Std.Data.yes(header.length,"-").concat =>line
    List("",line,header,line,"")
/Header   

# The investigation logs are stored in text filed under this directory
# --
    Sys.homeDir.sub("investigate.d") =>dir
    if(!dir.exists, dir.create)
    dir
//InvDir

# Current topic
# --
    if(Db2:Get("Investigate","topic")==null) {
        ShowTopics
        readLine("Enter topic to use, ENTER for 'default'").trim => topic
        if (topic=="") {topic="default"}
        Db2:Set("Investigate","topic",topic)
    }
    Db2:Get("Investigate","topic")
/GetCurrentTopic

# Change topic
# --
    if (Db2:Get("Investigate","topic")==null) {
        GetCurrentTopic  # asks for current
    } else {
        ShowTopics
        readLine("[" + GetCurrentTopic + "] Change topic (full name) or ENTER to keep current").trim => newTopic

        if (newTopic != "") {
            Db2:Set("Investigate","topic",newTopic)
        }
    }
/SetTopic

# List topics
# --
    Lib:Header("Known topics")
    
    latest=Dict
    InvDir.files(Glob("*.txt"))->f
        out(Int(f.lastModified,f))
    | _.sort->x
        file=x.data
        date=Date(x).fmt
        name=file.name.before(".").beforeLast("_")
        latest.set(name,date)
    |
        latest.keys->key
            date=latest.get(key)
            out(date + "  " + key)
    | _.sort->line
        println(line)
    | println
/ShowTopics



# Convert from old model of time stamped files to single files
# --
	P(1,readLine("Topic"))=>topic
	lines=Inner{
		InvDir.files(topic+"_*.txt")->file
			out(Int(file.lastModified, file))
		| _.sort->x
			x.data.read->line
				out(line)
	}

	InvDir.files(topic+"_*.txt")->f f.delete |
	InvDir.file(topic+".txt").create(lines)
	lines
/ConvertFromOldModel


# Get file for current topic
# --
    GetCurrentTopic => topic
	glob=topic +"*.txt"
	
	if (InvDir.files(topic+"_*.txt").length>0) {
		ConvertFromOldModel(topic)
	}
	topicFile=InvDir.file(topic + ".txt")
	if (!topicFile.exists) {
		dateString = Date.setFormat("yyyy-MM-dd").fmt
		topicFile.create(Header(topic + " " + dateString))
	}
	topicFile
/LogFile


    


# Get all files for current topic, sorted 
    GetCurrentTopic => topic
    InvDir.files->f
        assert(f.name.contains(topic))
        out(Str(f.name,f))
    | _.sort->x out(x.data)
/GetTopicLogFiles





# Show todo list
# --
	P(1,"*todo*") => pattern
	LogFile.read->line
		assert(line.trim.toLower.contains(pattern))
		println(line.trim)
//ShowLines






# Input mode
loop
    readLine("[" + GetCurrentTopic + "] Enter text, '.' to paste text, 'q' to quit or '?' for help").trim =>cmd

    if (cmd=="." || cmd.startsWith("..")) {
        # paste
        marker="."
        if (cmd.startsWith("..")) {
            marker=cmd.sub(2)
        }
        println("End-marker: '" + marker + "'")
        println("---")
        readLines(marker) =>lines
        LogFile.append("")
        LogFile.append("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< xxxxx")
        Inner {
            lines->line LogFile.append(line) 
        }
        LogFile.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> xxxxx")
        LogFile.append("")
        
    } else if (cmd=="?" || cmd=="?") { 
        Sequence(
            @
            @
            @ ---
            @ .                 - read pasted input lines, with end-marker '.'
            @ ..xxx             - read pasted input lines, with end-marker 'xxx'
            @ ?                 - get help (this page9
            @ h/header          - insert header
            @ d/date            - insert date/time
            @ t/topic           - change topic
            @ T/topics          - list all topics
            @ todo              - show *TODO* lines
            @ todone              - show *TODONE* lines
            @ c/cat             - display recent entries
            @ m/more          
            @ e/edit            - edit current file
            @ q/quit            - quit
            @ ---
            @
        )->line 
            println(line.trim)
    } else if(cmd==".h" || cmd=="h" || cmd=="header") { ## Header
        LogHeader
    } else if (cmd==".d" || cmd=='d' || cmd=="date") { ## date/time stamp
        LogFile.append(List("",Date.fmt))
    } else if (cmd==".t" || cmd=='t' || cmd=="topic") { ## change topic
        SetTopic
    } else if (cmd==".T" || cmd=='T' || cmd=="topics") { ## show topics
        ShowTopics
    } else if (cmd=="todo") {
        ShowLines("*todo*")
    } else if (cmd=="todone") {
        ShowLines("*todone*")
    } else if(cmd==".c" || cmd=='c' || cmd=="cat") { ## cat
        Show
    } else if(cmd==".m" || cmd=='m' || cmd=="more") { ## more
        Lib:m (LogFile)
    } else if(cmd==".e" || cmd=='e' || cmd=="edit") { ## edit
        Edit
    } else if (cmd==".q" || cmd=='q' || cmd=="quit") { ## quit
        break(true)
    } else {
        LogFile.append(cmd)
    }
    
/InputMode




# Log data
    Sys.lastResult =>res
    getType(res)=="List" =>isList

    if(isList) {
        readLine("Element number (Enter for all)") =>num
        if(num.?parseInt) {res.nth(num.parseInt) =>res}
    }

    List =>list
    list.add("")    
    res->x 
        list.add("# " +x) 
    |
    list.add("")
    LogFile.append(list)
/LogData


# Log text
    readLine("[" + GetCurrentTopic +"] Comment") =>line
    #Date.setFormat("HH:MM:ss").fmt =>time
    LogFile.append(line)
/LogText


# Log pasted text
    readLine("Type end marker, or just press Enter to use '.'").trim =>endMarker
    if(endMarker=="",".",endMarker) =>endMarker
    println("End-marker: '" + endMarker + "'")
    println("---")
    readLines(endMarker) =>lines

    LogFile.append("")
    LogFile.append("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< xxxxx")

    lines->line LogFile.append(line) |
    LogFile.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> xxxxx")
    LogFile.append("")
/LogPastedText


# Create header
    header = readLine("Enter header")
    LogFile.append(Header(Date.fmt + "  " + header))
/LogHeader


# Show lines for 3 newest files for current topic
    println
    files = GetTopicLogFiles #.last(3)
    files->f
        f.read->line
            println("| " + line)
    |
    println
/Show

Lib:e (LogFile)
/Edit

