# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
-------------------------------------------------------------------
Creating an investigation log when working with finding out why
a system behaves as it does. Uses Sys.lastResult to obtain
data.

To start new log or save existing, just open the LogFile
in an editor.
-------------------------------------------------------------------
>>> EOF
/Readme


# Create header as list of lines
	P(1,"Header") => header
	P(2,"-") => lineChar
	Lib.Data.yes(header.length,"-").concat =>line
	List("",line,header,line,"")
/Header	

# The investigation logs are stored in text filed under this directory
    Sys.homeDir.sub("investigate.d") =>dir
    if(!dir.exists, dir.create)
	dir
/InvDir

# Current topic
	if(Val("topic")==null) {
		ShowTopics
		readLine("Enter topic to use, ENTER for 'default'").trim => topic
		if (topic=="") {topic="default"}
		ValDef("topic",topic)
	}
	Val("topic")
/GetCurrentTopic

# Change topic
	if (Val("topic")==null) {
		GetCurrentTopic  # asks for current
	} else {
		ShowTopics
		readLine("[" + GetCurrentTopic + "] Change topic, ENTER to keep current").trim => newTopic

		if (newTopic != "") {
			ValDef("topic",newTopic)
		}
	}
	
/SetTopic

# List topics
	println
	println("Recent topics")
	println("-------------")
	Date.sub(Date.Duration.days(7)).get => oldestTime
	InvDir.files(Glob("*.txt"))->f
		assert(f.lastModified > oldestTime)
		out(f.name.beforeLast("_"))
	| _.sort.unique->x println(x) 
	| println
/ShowTopics

# Get file for current topic
	GetCurrentTopic => topic
	Date.setFormat("yyyy-MM-dd").fmt =>dateString
	InvDir.file(topic + "_" + dateString + ".txt") => topicFile
	if (!topicFile.exists) topicFile.create(Header(topic + " " + dateString))
	topicFile
/LogFile


# Get all files for current topic, sorted 
	GetCurrentTopic => topic
	InvDir.files->f
		assert(f.name.contains(topic))
		out(Str(f.name,f))
	| _.sort->x out(x.data)
/GetTopicLogFiles

# Input mode
loop
    readLine("[" + GetCurrentTopic + "] Enter text, '.' to paste text, '.q' to quit or '.?' for help").trim =>line

    if(line=="",Inner{LogFile.append("")})
    reject(line=="")

    if(line.startsWith(".")) {
    	if (line=="." || line.startsWith("..")) {
			# paste
	   		marker="."
			if (line.startsWith("..")) {
				marker=line.sub(2)
			}
			println("End-marker: '" + marker + "'")
			println("---")
			readLines(marker) =>lines
			LogFile.append("")
			LogFile.append("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< xxxxx")
			Inner {
				lines->line LogFile.append(line) 
			}
			LogFile.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> xxxxx")
			LogFile.append("")
		} else { 
			# parse commands
		    cmd = line.sub(1)
		    if(cmd=='?') { ## help
			Sequence(
				@
				@
				@ ---
				@ .                 - read pasted input lines, with end-marker '.'
		        	@ ..xxx             - read pasted input lines, with end-marker 'xxx'
		        	@ .?                - help, this page
		        	@ .h                - create header
				@ .d                - insert date/time stamp
		        	@ .t                - change topic
		        	@ .T                - show recent topics (7 days)
		        	@ .c                - show 3 latest topic log files (cat)
		        	@ .m                - show log file (more)
		        	@ .e                - edit log file
		        	@ .q                - quit
		        	@ ---
				@
			)->line println(line)
		        true =>done
		    } else if(cmd=='h') { ## Header
		    	LogHeader
			} else if (cmd=='d') { ## date/time stamp
				LogFile.append(List("",Date.fmt))
			} else if (cmd=='t') { ## change topic
				SetTopic
			} else if (cmd=='T') { ## show topics
				ShowTopics
		 	} else if(cmd=='c') { ## cat
				Show
		    } else if(cmd=='m') { ## more
		        Lib:m (LogFile)
		    } else if(cmd=='e') { ## edit
		        Edit
		    } else if (cmd=='q') { ## quit
		        break(true)
		    } 
		}        
	} else {
		#Date.setFormat("HH:mm:ss").fmt =>time
		LogFile.append(line)
	}
	
/InputMode




# Log data
    Sys.lastResult =>res
    getType(res)=="List" =>isList

    if(isList) {
        readLine("Element number (Enter for all)") =>num
        if(num.?parseInt) {res.nth(num.parseInt) =>res}
    }

    List =>list
    list.add("")    
    res->x 
        list.add("# " +x) 
    |
    list.add("")
    LogFile.append(list)
/LogData


# Log text
    readLine("[" + GetCurrentTopic +"] Comment") =>line
	#Date.setFormat("HH:MM:ss").fmt =>time
	LogFile.append(line)
/LogText


# Log pasted text
    readLine("Type end marker, or just press Enter to use '.'").trim =>endMarker
    if(endMarker=="",".",endMarker) =>endMarker
    println("End-marker: '" + endMarker + "'")
    println("---")
    readLines(endMarker) =>lines

    LogFile.append("")
	LogFile.append("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< xxxxx")

	lines->line LogFile.append(line) |
	LogFile.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> xxxxx")
	LogFile.append("")
/LogPastedText


# Create header
	header = readLine("Enter header")
	LogFile.append(Header(Date.fmt + "  " + header))
/LogHeader


# Show lines for 3 newest files for current topic
	files = GetTopicLogFiles.last(3)
	files->f
		f.read->line
			println(line)
/Show

Lib:e (LogFile)
/Edit

