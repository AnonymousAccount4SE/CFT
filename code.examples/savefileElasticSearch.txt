# Readme!
<<< EOF
ElasticSearch installs
----------------------

Verify functions defining lists of hosts and SSH user

- hosts
- user
- masterHosts
- logstashHosts
- kibanaHosts

Then run

- ES1 / ElasticSearchComplete       Works!

- KIB1 / InstallKibanaAll           Works!
- KIB2 / ConfigureKibanaAll			Works!

- LS1 / InstallLogstashAll			Works! (but no pipelines configured, only software install)
- LS2 / StartLogstash

All can be run multiple times.

>>> EOF
/Readme

Input("ssh target user@host").get
//GetTarget

"elasticsearch-7.7.1-amd64.deb"
//ESImage

"kibana-7.7.1-amd64.deb"
//KibanaImage





# Hosts in cluster
# --
"elk01.v elk02.v elk03.v elk04.v elk05.v".split
/hosts


# Master hosts
# --
"elk03.v elk04.v elk05.v".split
/masterHosts



# Logstash hosts
# --
	masterHosts
/logstashHosts


# Kibana hosts
	masterHosts
/kibanaHosts


# Initial master node
# --
	"elk03.v"
/masterHostInitial


# SSH user
# --
"roar"
/user











# Lookup ip address
# --
	P(1,"elk03.v")=>host
	foundName=false
	result=null
	Lib:run("nslookup",host).stdout->line
		if(line.startsWith("Name:") && line.contains(host)) {
			foundName=true
			assert(false)
		}
		if (foundName && line.startsWith("Address:")) {
			result=line.after(":").trim
		}
	|
	error(result==null,"Could not resolve " + host)
	result
//GetIp


# Ensure /mnt/storage ok
# --
	P(1,GetTarget)=>target
	P(2,"")=>prefix

	println(prefix+"Checking /mnt/storage/ISO ok")
	SSH:sudo(target,"mount -a")
	SSH:sudo(target,"ls /mnt/storage/ISO", true).get("exitCode") != 0 => notFound
	if (notFound) {
		println(prefix+"Creating /mnt/storage")
		SSH:sudo(target,"mkdir /mnt/storage", true) # ignore errors
		println(prefix+"Updating /etc/fstab")
		SSH:sudo(target,'echo "storage.s:/mnt/storage  /mnt/storage    nfs   rw    0 0" >> /etc/fstab')
		println(prefix,"mount -a")
		SSH:sudo(target,"mount -a")
	}
	SSH:sudo(target,"ls /mnt/storage/ISO", true).get("exitCode") != 0 => notFound
	error(notFound,"Failed to fix /mnt/storage mount on " + target)
//CheckOrFixMntStorage




# Install ElasticSearch
# --
    P(1,GetTarget) =>target
    P(2,"") =>prefix

	println(prefix+"INSTALLING " + target)
	APTUpdate:run(target,null,true)

	println(prefix+"Checking Java")
    Java:VerifyJava (target, prefix+"   ")

	println("Installing apt-transport-https")
	SSH:sudo(target,"apt-get install -y apt-transport-https")

	CheckOrFixMntStorage(target,prefix+"   ")
	println(prefix+"Installing " + ESImage)
	SSH:sudo(target,"apt-get install -y /mnt/storage/ISO/" + ESImage)

	##println("Enabling service")
	##SSH:sudo(target,"systemctl enable elasticsearch")

//InstallElasticSearch	


# Set up ElasticSearch configuration file
# --
	P(1,GetTarget) => target
	P(2,List(target)) => masterHosts
	P(3,"")=>prefix

	target.after("@") => nodeHost
	GetIp(nodeHost) => nodeHostIp

	nodeHost.before(".") => nodeName

	isMasterHost=""+masterHosts.contains(nodeHost)
	isDataHost=""+(!masterHosts.contains(nodeHost))

	masterHosts->host
		out('"' + host + '"')
	| _.concat(", ") => masterNodes

	masterHosts->host
		out('"' + GetIp(host) + '"')
	| _.concat(", ") => masterNodesIp

	hosts->host
		out('"' + host + '"')
	| _.concat(", ") => allNodes

	hosts->host
		out('"' + GetIp(host) + '"')
	| _.concat(", ") => allNodesIp

	SymDict(nodeHost,nodeHostIp,
		nodeName,isMasterHost,isDataHost,
		masterNodes,masterNodesIp,masterHostInitial,allNodes,allNodesIp
	).mergeCodes=>data

	# So the clue here is that by using IP addresses for network.host as well as
	# in the initial_master_nodes and the unicast.hosts, it works, as the
	# check on network.host is LITERAL. With this config, we can NOT do
	# curl to localhost, only to the IP-address. From the outside, we can not
	# use names like elk03.v, but have to use IP-addresses. Because the network.host
	# field is about ACCESS CONTROL and it is literal.


	Sequence(
		@ cluster.name: mycluster
		@ node.name: ${nodeName}
		@ node.data: ${isDataHost}
		@ node.ingest: ${isDataHost}
		@ node.master: ${isMasterHost}
 		@ network.host: "${nodeHostIp}"
		@ http.port: 9200
		@ path.data: /var/lib/elasticsearch
		@ path.logs: /var/log/elasticsearch
		@ cluster.initial_master_nodes: [ ${masterNodesIp} ]
		@ discovery.zen.ping.unicast.hosts: [ ${allNodesIp} ]
	)->line
		out(line.merge(data))
	| => config

	Lib:TmpFile("elasticsearch","yml") => f 
	f.create(config)

	println(prefix+"Configuration for " + target)
	println("---")
	f.read->line println(line) 
	|
	println("---")

	SSH:copy(f,target,"./elasticsearch.yml")
	SSH:sudo(target,"cp ./elasticsearch.yml /etc/elasticsearch")
	f.delete

	println("Creating directories for data and log")
	SSH:sudo(target,"mkdir -p /var/lib/elasticsearch")
	SSH:sudo(target,"mkdir -p /var/log/elasticsearch")

	SSH:sudo(target,"chmod 755 /var/lib/elasticsearch")
	SSH:sudo(target,"chmod 755 /var/log/elasticsearch")

	SSH:sudo(target,"chown elasticsearch /var/lib/elasticsearch")
	SSH:sudo(target,"chown elasticsearch /var/log/elasticsearch")

//InstallElasticSearchConfig




# Stop ElasticSearch nodes
# --
	hosts->host
		target=user+"@"+host
		println("STOPPING elasticsearch on " + target)
		##SSH:sudo(target,"systemctl stop elasticsearch")
		SSH:sudo(target,"service elasticsearch stop")
/StopElasticSearch




# Start ElasticSearch nodes
# --
	<<<<<< XXX
	# First start masterNodes separately, before starting the rest
	masterHosts->host
		target=user+"@"+host
		println("STARTING " + target)
		SpawnProcess(SymDict(target), 
			##SSH:sudo(target,"systemctl start elasticsearch")
			SSH:sudo(target,"service elasticsearch start")
		) =>proc
		out(proc)
	| _->proc
		proc.wait
		println("Started " + proc.data.target)
	|
	>>>>>>>> XXX

	# Starting data hosts
	hosts->host
		#reject(masterHosts.contains(host))
		println("STARTING elasticsearch on " + host)
		target=user+"@"+host
		SpawnProcess(SymDict(target),{
			SSH:sudo(target,"systemctl start elasticsearch")
		}) => proc out(proc)
	| => processes

	processes->proc
		proc.wait
		println("Started " + proc.data.target)
 	|
	println("All done!")
/StartElasticSearch



# Complete install ElasticSearch 
# --

	hosts->host
		target=user+"@"+host
		InstallElasticSearch(target)
		InstallElasticSearchConfig(target,masterHosts)
	|
	StopElasticSearch
	println
	StartElasticSearch
/ElasticSearchComplete



# Check install
# --
	P(1,GetTarget) => target

	# Only works using IP-address, not "localhost", see text in
	# the InstallElasticSearchConfig function

	target.after("@") => host
	GetIp(host) => ip
	SSH:run(target,"curl -XGET 'http://"+ip+":9200/_cluster/state?pretty'").stdout
/CheckInstall


# Check install remote
# --
	P(1,GetTarget) => target

	# Only works using IP-address, not "localhost", see text in
	# the InstallElasticSearchConfig function

	target.after("@") => host
	GetIp(host) => ip
	SSH:run(target,"curl -XGET 'http://"+ip+":9200/_cluster/state?pretty'").stdout
/CheckInstallRemote



	
# Install kibana
# --
	kibanaHosts->host
		target=user+"@"+host
		println("INSTALLING kibana " + host)
		CheckOrFixMntStorage(target)

		println("Installing " + KibanaImage)
		SSH:sudo(target,"apt-get install -y /mnt/storage/ISO/" + KibanaImage)

		println("Enabling service")
		SSH:sudo(target,"systemctl enable kibana")
/InstallKibanaAll


# Configure Kibana all
# 
# Using IP-addresses to connect to the master nodes!
#
# Port 5601
# Note: Kibana uses a bit of time after restart, to become available!
# --
	kibanaHosts->host
		target=user+"@"+host
		
		println("Configure Kibana " + host)


		# Create config
		
		Inner {
			masterHosts->host 
				out('"http://' + GetIp(host) + ':9200"')
			| _.concat(", ")
		} => masterNodesIp

		myIp=GetIp(host)

		SymDict(host,myIp,masterNodesIp).mergeCodes => data

		println("Creating log dir /var/log/kibana")
		SSH:sudo(target,"mkdir -p /var/log/kibana")
		SSH:sudo(target,"chown kibana /var/log/kibana")

		
		Inner {
			Sequence(
				@ server.host: "0.0.0.0"
				###@ server.host: "${host}"
				@ server.port: 5601
				@ logging.dest: /var/log/kibana/kibana.log
				#@ logging.verbose: true
		        @ elasticsearch.hosts: [ ${masterNodesIp} ]
			)->line
				out(line.merge(data))
		} => config

		Lib:TmpFile("kibana","yml") => f
		f.create(config)

		println("Creating kibana.yml")
		println("---")
		{ f.read->line println(line) }
		println("---")

		SSH:copy(f,target,"./kibana.yml")
		SSH:sudo(target,"cp ./kibana.yml /etc/kibana/kibana.yml")

		f.delete
	|
	println("Restarting kibana")
	StopKibana
	println
	StartKibana
/ConfigureKibanaAll


# Stop kibana
# --
	kibanaHosts->host
		target=user+"@"+host
		println("STOPPING kibana " + host)
		SSH:sudo(target,"systemctl stop kibana")
/StopKibana

		
	
# Start kibana
# --
	kibanaHosts->host
		target=user+"@"+host
		println("STARTING kibana " + host)
		SSH:sudo(target,"systemctl start kibana")
/StartKibana







# Install Logstash - enables service, but does not start
# --
    P(1,GetTarget) =>target
    P(2,"") =>prefix

	println(prefix+"INSTALLING logstash " + target)
    # Check if logstash already installed
    SSH:sudo (target, "systemctl status logstash.service", true).get("exitCode")!=4 =>found
    if (found) {
        println(prefix+"Logstash already installed")
    } else {
        # Requires java 8, 11 or 14
        println(prefix+"Setting up logstash")
        Java:VerifyJava (target, prefix+"   ")

        List(
            'wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -',
            'apt-get install apt-transport-https',
            'echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list',
            'sudo apt-get update && sudo apt-get install logstash',
            'systemctl enable logstash.service'
        ) =>cmd

        println(prefix+"Installing logstash")
        SSH:sudo (target, cmd)
	}
	println(prefix+"Enabling logstash")
	SSH:sudo (target,"systemctl enable logstash")
/InstallLogstash


# Install logstash for all logstashHosts
#
# Note: configuration not included, just remember to use IP addresses of
# the ElasticSearch cluster nodes!!
# --
	logstashHosts->host
		target=user+"@"+host
		InstallLogstash(target)
/InstallLogstashAll


# Stop logstash
# --
	logstashHosts->host
		println("STOPPING logstash " + host)
		target=user+"@"+host
		SSH:sudo(target,"systemctl stop logstash")
/StopLogstash


	
# Start logstash
# --
	logstashHosts->host
		println("STARTING logstash " + host)
		target=user+"@"+host
		SSH:sudo(target,"systemctl start logstash")
/StartLogstash

		
	

ElasticSearchComplete 
/ES1



InstallKibanaAll
/KIB1



ConfigureKibanaAll
/KIB2



InstallLogstashAll
/LS1


StartLogstash
/LS2






