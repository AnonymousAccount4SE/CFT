# Readme
# --
<<<< EOF
This script is for background jobs control, as started by
the '&' expression, which has the following syntax

& expr

or 

& expr, name

where name is an identifier or a string, to identify the process.


Foregrounding a job
-------------------
For jobs that require input, we use the ToForeground() function.
This starts a simple command loop, where output from the job is
displayed on screen, and we can send input to it. 

We can detach from the job by typing .quit, or if the job 
completes.

/StartHeavyTasks
>>>> EOF
->line println("| " + line)
/Readme


# Get all jobs
# --
	Inner {
		Sys.Jobs.namesCompleted->name out("COMPLETED " + name)
	} + Sys.Jobs.namesRunning
/AllJobs



# Get running job names
# --
	Sys.Jobs.namesRunning
/Running


# Return completed job names (for integration into prompt)
# --
	Sys.Jobs.namesCompleted
/Completed


# Get single result from first terminated process
# --
	completed = Sys.Jobs.namesCompleted
	error(completed.length==0, "No completed jobs")

	name=completed.first
	proc=Sys.Jobs.getCompleted(name)

	Lib:Header(name)
	output=proc.output
	if (output.length > 0) Inner {
		output->line println(line)
	} @rel

	Sys.Jobs.deleteCompleted(name)
	
	proc.exitValue
/Get


# Clear all completed jobs
# --
	Sys.Jobs.namesCompleted->name Sys.Jobs.deleteCompleted(name)
/Clear


# Bring running job to "foreground", to do interactive follow-up
# --
	Lib:MenuSelect(Sys.Jobs.namesRunning,null,"Select job") => name

	Lib:Header("Selected job: " + name)
	println("Below follows an input loop.")
	println("Output from the process is displayed, and you may enter input to it")
	println
	println("To detach from job, type '.quit' and to wait for more output,")
	println("type '...'")
	println
	println("All other inputs are sent to stdin of the process")
	println
	println("Text following below the line, is output from the job.")
	readLine("ENTER to continue")
	println("--------------------------------------------------------------------")

	result=null

	proc=Sys.Jobs.getRunning(name)
	error(proc==null,"No running process " + name)
	loop
		Inner { proc.output->line println(line) }
		if (proc.isDone) {
			println("(Job has terminated)")
			result=proc.exitValue
			#Sys.Jobs.deleteCompleted(name)
			break
		}
		readLine => line
		break(line==".q")
		if (line != "...") proc.sendLine(line)
		Sys.sleep(1000)
	|
	result
/ToForeground