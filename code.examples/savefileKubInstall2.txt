# Readme
# --
<<<< EOF

Run on host with passwordless ssh access to hosts

https://www.youtube.com/watch?v=U1VzcjCB_sY&t=1770s

>>>> EOF
/Readme


# Master hosts
# --
	"123".chars->c out("k"+c+".v")
/masterHosts

# Worker hosts
# --
	"456".chars->c out("k"+c+".v")
/workerHosts

# All hosts
# --
	masterHosts+workerHosts
/allHosts

# Helper - get ssh user name
# --
	Db2:Get(Sys.scriptId,"ssh-user") => name
	if (name==null) {
		Input("ssh user name").get => name
		Db2:Set(Sys.scriptId,"ssh-user",name)
	}
	name
//sshUser


# Step 1 - update + install qemu-guest-agent
# --
	allHosts->h	
		target=sshUser+"@"+h
		Sequence(
			@ apt-get update
			@ apt install qemu-guest-agent -y
		)->cmd
			println(h + ": " + cmd)
			SSH:sudo(target,cmd,false,false)
/step1

# Step 2 - container runtime
# --
	allHosts->h	
		target=sshUser+"@"+h
		Sequence(
			@ apt install containerd -y
			@ systemctl status containerd
			@ mkdir /etc/containerd
			@ containerd config default > /etc/containerd/config.toml
		)->cmd
			println(h + ": " + cmd)
			SSH:sudo(target,cmd,false,true)
/step2

# Step 3 - modify containerd config
# --
	allHosts->h	
		target=sshUser+"@"+h
		file=Lib:TmpFile("x")

		Dir.run("scp", target+ ":/etc/containerd/config.toml", file.path)
		
		modifiedLines = Inner {
			enable=false
			file.read->line
				if (line.contains("runc.options")) enable=true
				if (enable) {
					if (line.contains("SystemdCgroup")) {
						out(line.replace("false","true"))
						enable=false
					} else {
						out(line)
					}
				} else {
					out(line)
				}
		}

		file.create(modifiedLines)
		Dir.run("scp", file.path, target+":./config.toml")  # home dir
		file.delete

		SSH:sudo(target,"cp ./config.toml /etc/containerd/config.toml")
/step3



# Turn off swapping
# --
    P(1,GetTarget) => target
    P(2, false) => debug

    println(""+target+": turning off swap")
    SSH:sudo(target,'swapoff -a', false, debug)

    # Also need to modify /etc/fstab, using CFT on remote host
    Java:VerifyCFT(target)
    Date.setFormat("yyyy-MM-dd").fmt => today

    cftScript=Lib:TmpFile("cft")
    cftScript.create(Sequence(
        @ File("/etc/fstab")=>f
        @ File("fstab.txt.backup_<<today>>").copyFrom(f)
        @ f.read->line
        @    if (line.split.contains("swap"))
        @       out("# " + line)
        @    else
        @       out(line)
        @ | => newLines
        @ f.create(newLines)
        @ /run
    ).mergeExpr)
    SSH:copy(cftScript, target, "./CFT/savefileTest.txt")
    SSH:sudo(target, './RunCFT Test run ":quit"', false, false)
    cftScript.delete
//SwappingOff



# Step 4 - disable swap
# --
	allHosts->h	
		target=sshUser+"@"+h
		SwappingOff(target)
/step4


# Step5 - ip forwarding
# --
	allHosts->h
		target=sshUser+"@"+h
		cftScript=Lib:TmpFile("cft")
		cftScript.create(Sequence(
			@ File("/etc/sysctl.conf") => f
			@ f.read->line
			@    if (line.startsWith("#net.ipv4.ip_forward=1"))
			@       out(line.replace("#",""))
			@    else 
			@       out(line)
			@ | =>newLines
			@ f.create(newLines)
			@ /run
		).mergeExpr)
  	 	SSH:copy(cftScript, target, "./CFT/savefileIpForward.txt")
    	SSH:sudo(target, './RunCFT IpForward run ":quit"', false, false)
		cftScript.delete
/step5
		

# Step 6 - br_netfilter + reboot
# --
	allHosts->h
		target=sshUser+"@"+h
		cftScript=Lib:TmpFile("cft")
		cftScript.create(Sequence(
			@ File("/etc/modules-load.d/k8s.conf") => f
			@ f.create("br_netfilter")
			@ /run
		).mergeExpr)
  	 	SSH:copy(cftScript, target, "./CFT/savefileNetFilter.txt")
    	SSH:sudo(target, './RunCFT NetFilter run ":quit"', false, false)
		cftScript.delete
		SSH:sudo(target,"reboot",true,false)
/step6
		
		
		
# Step 7 - install common tools
# --
	allHosts->h
		target=sshUser+"@"+h
		SSH:sudo(target,"curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg",false,false)
		SSH:sudo(target,'echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list')
		SSH:sudo(target,"apt update")
		SSH:sudo(target,"apt install kubeadm kubectl kubelet -y",false,true)
/step7


# Helper: get ip of host
# --
	P(1)=>hostname
	found=false
	address=null
	Dir.runCapture("nslookup",hostname)->line
		if (line.toLower.contains(hostname.toLower)) found=true
		if (found && line.contains("Address:")) {
			address=line.after(":").trim
			break
		}
	|
	address
//GetIP


# Step 8 - first master host - kubeadm init
# --
	masterHosts.first->h
		target=sshUser+"@"+h
		cpEndpoint=GetIP(h)
		nodeName=h
		SSH:sudo(target, "kubeadm init --control-plane-endpoint="+cpEndpoint+" --node-name "+nodeName+" --pod-network-cidr=10.244.0.0/16", false, true) => result
		File("k-cluster_init.txt") => log
		println("Created " + log.path)
		log.create(result.stdout)
/step8	



# Step 9 - kubectl rights on first master host
# --
	target=sshUser + "@" + masterHosts.first 		
		
	# Set up kubectl rights on host
	SSH:run(target,"mkdir -p $HOME/.kube")
	SSH:run(target,"sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config")
	SSH:run(target,"sudo chown $(id -u):$(id -g) $HOME/.kube/config")
/step9


# Step 10 - overlay network / flannel
# --
	target=sshUser + "@" + masterHosts.first 		

	SSH:run(target,"kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml",false,true)
/step10



# Helper: get join command for cluster
# --
	P(1,false) => forMasterNode
	
	target=sshUser + "@" + masterHosts.first 		
	
	SSH:run(target,"kubeadm token create --print-join-command").stdout->line
		assert(line.contains("join"))
		out(line)
		break
	| _.first => joinCommand
	
	if (forMasterNode) joinCommand=joinCommand + " --control-plane"
	
	joinCommand
//GetJoinCommand
	
	


# Step 11 - add worker nodes
# --
	joinCommand=GetJoinCommand(false)
	
	workerHosts->h
		target=sshUser + "@" + h
		println("JOINING WORKER " + h)
		SSH:sudo(target,joinCommand,false,true)
		
/step11



# Step 12 - add remaining master nodes
# --
	joinCommand=GetJoinCommand(true)

	masterHosts.keep(1)->h
		target=sshUser + "@" + h
		println("JOINING MASTER " + h)
		SSH:sudo(target,joinCommand,false,true)
/step12			

