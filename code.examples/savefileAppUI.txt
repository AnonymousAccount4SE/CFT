# Readme
<<<< EOF
AppUI

For standardized and good looking console user interface

Remember doing initial call to  

	Lib:GetTerminalSize

to get terminal proportions right
See 'example' function

>>>> EOF
/Readme


# Helper
# --
P(1," ")=>char
P(2,0)=>length
	Lib.Data.each(1,length)->x out(char) | _.concat
/Chars



# Helper
# --
P(1) => str
P(2) => char
P(3) => len
	if (str.length<len) str=str+Chars(char,len-str.length)
	str
/Pad


P(1,"r---")=>s
	# https://en.wikipedia.org/wiki/Box-drawing_character
	Dict
	.set("r",Sys.uchar("2554"))
	.set("-", Sys.uchar("2550"))
	.set("+",Sys.uchar("2560"))
	.set("|",Sys.uchar("2551"))
	=> map

	s.chars->c
		out(map.get(c,c))
	| _.concat => result

	Curses:TxtGreen+result+Curses:Reset
/fix
		


P(1,null) => title
	titleLine=fix("r--") + if(title!=null," ["+title+"] ","")
	titleLine=Curses:Clear + Pad(titleLine,fix("-"),Cfg.w-2)
	println(titleLine)
	""
/DoShowTopLine
	
	
P(1,null) => header
	println(fix("+- ") + header)
	println(fix("|"))
/DoShowHeader


	
	

P(1,List) => shortNames
P(2) => current
	line1=""
	line2=""
	Inner {
		space=false
		shortNames->name
			if (space) {line1=line1+" " line2=line2+" "}
			line1=line1+name
			line2=line2+Chars(
				if (name==current, "^", " "),
				name.length
			)
			space=true
	}
	println(fix("| ") + line1)
	println(fix("| ") + line2)
/DoShowContext
	
	


	
P(1,"Label") => label
P(2,null) => currValue
P(3,true) => supportOptions
	labelLine=fix("+- ") + Curses:Bold + label  
		+ if(currValue != null, " / Enter for ["+currValue+"]","") 
		+ Curses:Reset
		+ if(supportOptions, " ('.' for options)", "")
	
	println(labelLine)
	println("?")
	readLine => val
	println()
	if (val==".") {
		DoShowHeader("Dot-commands")
		println(fix("|")+" .xxx   - jump to other page")
		println(fix("|")+" .q     - to abort")
		println(fix("|"))
		println(labelLine)
		println("?")
		readLine=>currValue
	}
	
	if (val=="") val=currValue
	val
/DoInput




Dict
	.set("data",List)
	.set("Lrow",Lambda{
		P(1)=>shortName
		P(2)=>longName
		P(3)=>value
		self.data.add(SymDict(shortName,longName,value))
	})
	.set("Lshow",Lambda{
		sLen=0
		lLen=0
		vLen=0
		self.data->x 
			sLen=if(x.shortName.length>sLen, x.shortName.length, sLen)
			lLen=if(x.longName.length>lLen, x.longName.length, lLen)
			vLen=if(x.value.length>vLen, x.value.length, vLen)
		|
		self.data->x
			line=fix("| ") + 
				Pad(x.shortName + " ","-",sLen+4)
				+ " " + Pad(x.longName+" ","-",lLen+4)
				+ " [" + x.value + "]"
			println(line)
		|
		println(fix("|"))
	})
/DoSummaryObj




P(1,List) => data
P(2, Lambda{P(1)}) => LambdaLabel
	println(fix("|"))
	pos=1
	data->row
		println(fix("|  ") + Pad(""+pos," ",5) + LambdaLabel.call(row))
		pos=pos+1
	|
	println(fix("|"))
	DoInput("Enter number",null,false) => str
	if (str.?parseInt) {
		n=str.parseInt-1
		if (n<0 || n>data.length-1) {
			null
		} else {
			data.nth(n)
		}
	} else {
		null
	}
/DoMenu




# Space
# --
	println("|")
/DoSpace


	
# Test
# --
	Lib:GetTerminalSize  # update Cfg
	
	
	DoShowTopLine("Clone VM")
	DoShowContext(
		"Orig Name CPU RAM Disk Nic Confirm".split,
		"Name"
		)
	DoInput(
		"Name of new VM",
		"mcfg1.v"
		)

	# ---

	DoShowTopLine("Clone VM")
	DoShowContext(
		"Orig Name CPU RAM Disk Nic Confirm".split,
		"Confirm"
		)
	DoShowHeader("Confirm")
	
	obj=DoSummaryObj
	obj.Lrow.call("Orig","VM to clone","kubs05.v")
	obj.Lrow.call("Name","Name of new VM", "mcfg1.v")
	obj.Lrow.call("CPU","Number of CPUs", "4")
	obj.Lrow.call("RAM","GB of RAM","8")
	obj.Lrow.call("Disk","GB of disk","32")
	obj.Lrow.call("Nic","Network NIC name","ens3")
	obj.Lshow.call
	
	DoInput(
		"Type 'yes' to confirm",
		"no"
		)

	# ---
	
	DoShowTopLine("Top menu")
	DoMenu(List("Create VM from scratch","Clone existing VM","Show VM status","Start VM", "Stop VM"))
	
/example
