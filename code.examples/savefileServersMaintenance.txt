# Readme
<<< EOF
------------------------------------------------
Collection of functions for querying and 
managing servers remotely via SSH. For scripts
to work, the remote server must

- allow ssh without password
- allow sudo without password

To do this, see the SSH script and its Readme
function.

A single main function run() handles all cases.
------------------------------------------------
>>> EOF
/Readme


Input("SSH target on format username@server").get
/ReadSSHTarget


Val("showDebug")
/showDebug


P(1)=debug
	ValDef("showDebug", debug)
/setDebug

P(1,ReadSSHTarget)=target
P(2,readLine("Command"))=command
P(3,Dict)=codes
P(4,false)=showDebug
	call "SSH:run" (target,command,codes,showDebug)
/run



P(1,Input("IP address to wait for").get)=ip 
P(2,10)=retries
loop
	error(retries<=0,"No Ping response from " + ip)
	retries-1 =retries
	true =ok
	{ Dir.runCapture("ping","-c","1",ip)->line 
		when(line.contains("100% packet loss"), {false=ok})
	}
	break(ok)
	Sys.sleep(500)
|
true
/WaitForPing


P(1,Input("SSH target user@host").get)=target
P(2,Input("Host name").get)=hostname
	TmpFile("hn")=f 
	f.create(hostname)
	
	println("* Copying hostname file to target")
	Dir.run("rcp", f.path, target+":./hostname")
	
	println("* Moving hostname file to /etc")
	run(target,List("sudo bash","cp ./hostname /etc"))
	
	println("* Deleting hostname from home dir")
	run(target,"rm ./hostname")
	
	f.delete
/VMSetHostname



P(1,Input("SSH target user@host").get)=target
P(2,Input("IP address xx.xx.xx.xx/MM").get) =ip
	error(!ip.contains("/"), "IP address missing mask? xx.xx.xx.xx/MM")
	
	println("* Running remote command 'ip addr' to list network device names")
	println("---------------------------------------------------------------")
	run(target,"ip addr").get("stdout")->line
		println("    " + line)
	|
	
	println
	Input("Enter network device name").get=nic
	
	TmpFile("np")=f
	f.create(VMNetplan(ip,nic))
	
	println("* Copying netplan to target")
	Dir.run("rcp", f.path, target+":./netplan.txt")
	
	println("* Deleting all files under /etc/netplan")
	run(target, List("sudo bash","rm -f /etc/netplan/*"))
	
	println("* Moving netplan file into /etc")
	run(target, List("sudo bash","mv ./netplan.txt /etc/netplan/50-cloud-init.yaml"))
/VMConfigureNetplan

	
PDict("ip","nic").mergeCodes=data
error(data.hasNullValue,"Expected parameter for IP address and mask on format xx.xx.xx.xx/MM")
<<< EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    ${nic}:
      dhcp4: no
      gateway4: 10.0.0.138
      addresses: [${ip}]
      nameservers:
        addresses: [10.0.0.3, 10.0.0.4]
>>> EOF
->line
	out(line.merge(data))
/VMNetplan


# Example on how to classify java support on remote server (interactive)
	ReadSSHTarget =target
	Dict
		# Maps output strings to result codes
		.set("not found","notfound")
		.set("OpenJDK","openjdk")
		.set('"11.0.', "v11")
		.set('"14.0.', "v14")
		=codes

	List("java -version")=commands
	
	run (target, commands, codes) =result
	!result.contains("notfound") =hasJava
	println("Java status for " + target + " -> hasJava=" + hasJava + ", all codes = " + result.concat(" "))
/ExampleCodedResponse







