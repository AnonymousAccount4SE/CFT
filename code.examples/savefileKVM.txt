# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



# Script readme
<<< EOF
--------------------------------------------------------------
NOTE: You MUST run CFT as root for this script to work.
--------------------------------------------------------------

This script manages creation, cloning, delete, start and stop
of Virtual Machines using KVM on Linux.

To get started, perform the following tasks:

* install and enable kvm
* modify network config to create bridge 'br0'
* create first VM

Install KVM
-----------
> sudo apt-get install qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker
> sudo systemctl enable libvirtd
> sudo systemctl start libvirtd

Then copy at least one OS image into /var/lib/libvirt/boot. That's where 
this script expects to find them.

Create network bridge on host server
------------------------------------
This script requires there to exist a network bridge 'br0', which all
VM's use. Configuring this on a server with two network cards is easy
with netplan:

network:
  version: 2
  renderer: networkd
  ethernets:
    enp2s0f0:
      dhcp4: no
      gateway4: 10.0.0.138
      nameservers:
        addresses: [10.0.0.3, 10.0.0.4]
      addresses: [10.0.11.51/16]
    enp2s0f1:
      dhcp4: true
  bridges:
    br0:
      interfaces: [enp2s0f1]

Modify the gateway4, nameserver addresses and the address(es) for the 
server itself (10.0.11.51/16 in above example).

Also ensure you use correct network device names. These are
displayed with

> ip addr


Create first VM
---------------
To create the first VM, run the interactive Create function. It
asks for details, then creates a VM. Often its good to create
a template VM, then clone this to individual VM's.

If you are running on a server with X windows, select headless no,
and then after installation has started, just from a terminal:

> sudo bash
> virt-manager

If no X-windows, enter "yes" for headless. You must then use 
VNC to complete the install. Run the VNCHelp function, to look up
the port number (usually 5900), then follow the instructions to 
transport the port number to another PC, where you run VNC. 

--
AutoClone is the preferred way of creating new VM's, as
it includes the necessary waits and checks for ping/ssh before
going on.
--------------------------------------------------------------
>>> EOF
/Readme



Dir("/var/lib/libvirt/boot") =>d
error(!d.exists,"Missing directory: " + d.path)
d
/BootImagesDir


# List of VM names to protect against accidental delete
    List()
/DoNotDelete



# Selects boot image
# --
    BootImagesDir.files =>data
    Lambda { P(1).name } =>macroGetElementName
    Lib:MenuSelect (data, macroGetElementName) 
/BootImage



# Various private macros
# --
    Dict
        .set("noSpace", Lambda { P(1).replace(" ","_").replace("^t".unEsc,"_") })
        .set("exec", Lambda { P(1,"ls -l") =>cmd println("------> " + cmd) println("") Dir.run(cmd.split) })
/Util




# Run virsh to display status for all defined VM's
	println
	Lib:run(List("virsh","list","--all")).stdout->line println(line) |
	println
/status


# Short for status
    status
/s



P(1,"someTarget") =>target
    println("STARTING " + target)
    Lib:run(List("virsh","start","--domain",target),List,true)
    status
/Start


P(1,"someTarget") =>target
    println("STOPPING " + target)
    Lib:run(List("virsh","destroy","--domain", target),List,true)
    status
/Stop


P(1,"someTarget") =>target
    println("DELETING " + target)
    error(DoNotDelete.contains(target),
        "Can not delete target " + target + ": remove from DoNotDelete list first")
    Stop(target)
    Lib:run(List("virsh","undefine","--domain",target),List,true)
    vdisk = Dir("/var/lib/libvirt/images").file(target + ".qcow2")
    if(vdisk.exists) vdisk.delete
    status
/Delete


# Interactive cloning of existing VM - stops original - 
#  # See AutoClone for newest version
# --
    Lib:Header ("Cloning existing VM")
    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")
    
    null =>original
    null =>cloneName
    null =>originalIp
    null =>newIp
    loop
        status
        Input("Original VM").get =>original
        Input("New VM name / will also be host name").get =>cloneName
       	Input("Original IP address or name (kubsXX.v)").get =>originalIp
        Input("New IP address and mask: xx.xx.xx.xx/MM").get =>newIp
        false =>ok
        if(!newIp.contains("/"),Inner{
            println("*** Missing '/MM' net mask from IP address")
        }, Inner{
            Lib:ReadValueBoolean ("Ok", false) =>ok
        })
        break(ok)
    |
    Stop(original)
    Util.exec.call("virt-clone --original " + original + " --name " + cloneName + " --auto-clone"
        + " --file /var/lib/libvirt/images/" + cloneName + ".qcow2")
    Start(cloneName)
    status
    
    Dir.runCapture("whoami").nth =>currUser
    
    println
    println("----------------------------------------------------------")
    println("The Clone function can now configure hostname and ")
    println("netplan for the new VM. This requires password-less SSH")
    println("for your current user: " + currUser)
    println
    println("Also need sudo without passwords (on the template VM)")
    println("----------------------------------------------------------")
    println
    Lib:ReadValueBoolean ("Continue", true) =>confirm
    error(!confirm,"Aborting config of VM via SSH")

    println
    println("* Waiting for new node to respond to ping")
    ServersMaintenance:WaitForPing (originalIp, 30)

    println
    Input("Enter ssh user name").get =>sshUser

    println
    println("*** NOTE ***")
    println("------------")
    println("Ensure you can SSH into " + sshUser + "@" + originalIp + " without password being root,")
    println("as this script must always run as root (for KVM cloning etc).")
    println
    println("Also verify that you can run sudo without password.")
    readLine("(Press Enter)")
    println

    sshUser+"@"+originalIp =>target
    
    println("* Configuring hostname")
    ServersMaintenance:VMSetHostname (target, cloneName)

    println("* Configuring netplan")
    ServersMaintenance:VMConfigureNetplan (target, newIp)

    println("* Rebooting new VM")
    SSH:sudo (target, "reboot", true)

    "Done"
/Clone







# Automatic cloning of existing VM - stops original
# --
	P(1) => original           # original VM ("kubsXX")
	P(2) => cloneName          # new VM name
	P(3) => originalIp         # ip of the VM that got cloned
	P(4) => newIp			   # ip/NN
	P(5) => sshUser            # for config
	P(6) => nic                # VM network card to configure ("ens3" etc) - run "ip addr" on original VM

	PDict("original","cloneName","originalIp","newIp","sshUser") => pdict
	error(pdict.hasNullValue,"Missing parameter(s)")
	error(!newIp.contains("/"), "Invalid newIp - must contain /NN netmask")

    Lib:Header ("Cloning existing VM")
    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

	println("* Stopping original VM " + original)
    Stop(original)

    println("* Creating clone " + cloneName)

    cmd = "virt-clone --original " + original + " --name " + cloneName + " --auto-clone"
            + " --file /var/lib/libvirt/images/" + cloneName + ".qcow2"
    
    Lib:run(cmd.split)

    println("Starting clone")
    Start(cloneName)

    
    
    println("* Waiting for new node to respond to ping")
    ServersMaintenance:WaitForPing (originalIp, 30)

    target = sshUser+"@"+originalIp

    println("* Wait for SSH ok")
    Inner {
    	Lib.Data.yes(20,"x") -> dummy
    		break(SSH:HostOkSSH(target))
    		Sys.sleep(1000)
    }

    
    println("* Configuring hostname")
    ServersMaintenance:VMSetHostname (target, cloneName)

    println("* Configuring netplan")
    ServersMaintenance:VMConfigureNetplan (target, newIp, nic)

    println("* Rebooting new VM: " + cloneName)
    SSH:sudo (target, "reboot", true)

    "Done"
 /AutoClone






# Create new VM from scratch - fully interactive
    null =>bootImage
    null =>name
    false =>headless
    8192 =>ram
    4 =>cpus
    32 =>disk
    loop
        Lib:Header ("Create new KVM Virtual Machine")

        BootImage =>bootImage
        println("# Selected " + bootImage.path)

        Lib:ReadValue ("New VM name", name) =>name

        println("")
        println("# Headless => no means use virt-manager") 
        println("# Headless => yes (advanced) means use VNC to complete installation")
        Lib:ReadValueBoolean ("Headless", headless) =>headless

        Lib:ReadValueInt ("RAM MB", ram) =>ram
        Lib:ReadValueInt ("CPU's", cpus) =>cpus
        Lib:ReadValueInt ("Disk GB", disk) =>disk
        Lib:ReadValueBoolean ("Enter 'yes' to confirm this is okay", false) =>ok
        break(ok)
    |
    Lib:ReadValueBoolean ("Enter 'yes' to continue", false, "yes","abort") =>continue
    if(!continue,Inner{
        println("Aborting")
        error(true,"Aborting")
    })

    List("virt-install",
        "--name",name,
        "--ram =>"+ram,
        "--vcpus =>"+cpus,
        "--cpu","host",
        "--hvm",
        "--network =>bridge =>br0,model =>virtio",
        "--disk","path =>/var/lib/libvirt/images/"+name+".qcow2,size =>"+disk+",bus =>virtio,format =>qcow2",
        "--cdrom",bootImage.path
    ) =>cmd
    if(headless, 
        cmd+List("--graphics","vnc"),  
        cmd
    ) =>cmd

    debug(cmd.concat(" "))
    Dir.runDetach(cmd)

    <<< EOF
    -----------------------------------------------------------------
    Use vnc or start virt-manager (as root) to finalize installation

    virt-manager can be started by entering 'mgr' and press enter
    -----------------------------------------------------------------
    >>> EOF
/Create


# Run virt-manager (required X-windows)
    Dir.run("virt-manager")
/mgr



# Info on using VNC for installation
    readLine("VM name") =>vm

    Dir.runCapture("hostname").nth.trim =>host

    Dir.runCapture("virsh","dumpxml",vm)->line
        assert(line.contains("vnc")) out(line)
    | _.nth =>portInfo

    Dict
        .set("host",host)
        .set("portInfo",portInfo)
        .set("vm",vm)
        .mergeCodes =>data

    <<< EOF
----------------------------------------------
To connect with VNC, locate the port number,
this is listed below. 

Then from remote computer open an ssh:

ssh <user>@<server> -L<PORT>:127.0.0.1:<PORT>

The port is identified by running 

virsh dumpxml ${vm} | grep vnc

where <VM> is the name of the VM. 
This produces the following line:

${portInfo}
----------------------------------------------
    >>> EOF
    ->line
        out(line.merge(data))
/VNCHelp




# Example using AutoClone 
# --
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF
# Utility
    PDict("host","ip")
/H


Sequence(
    H("mcfg1.v","10.0.6.4")
    H("mcfg2.v","10.0.6.5")
    H("mcfg3.v","10.0.6.6")
    H("md11.v","10.0.6.7")
    H("md12.v","10.0.6.8")
    H("md13.v","10.0.6.9")
    H("md21.v","10.0.6.10")
    H("md22.v","10.0.6.11")
    H("md23.v","10.0.6.12")
    H("mongos.v","10.0.6.13")
)
/MongoHosts

MongoHosts->x out(x.host)
/hosts


# Create one clone
# The template VM has IP = 10.0.6.254
# --
P(1) => host
P(2) => ip
    original="kubs"  # k-series Ubuntu Server
    cloneName=host
    originalIp="10.0.6.254"
    sshUser="roar"
    nic="ens3"  ## run "ip addr"  on original VM to decide
    
    KVM:AutoClone(original, host, originalIp, ip+"/16", sshUser, nic)
/CreateClone

# Main function - creates all nodes
# --
    MongoHosts -> x
    CreateClone(x.host, x.ip)
/CreateMongoCluster
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF
->line println(line)
/ExampleAutoClone
