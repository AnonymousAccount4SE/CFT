# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



# Script readme
<<< EOF
--------------------------------------------------------------
NOTE: You MUST run CFT as root for this script to work.
--------------------------------------------------------------

This script manages creation, cloning, delete, start and stop
of Virtual Machines using KVM on Linux.

To get started, perform the following tasks:

* install and enable kvm
* modify network config to create bridge 'br0'
* create first VM

Install KVM
-----------
> sudo apt-get install qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker
> sudo systemctl enable libvirtd
> sudo systemctl start libvirtd

Then copy at least one OS image into /var/lib/libvirt/boot. That's where 
this script expects to find them.

Create network bridge on host server
------------------------------------
This script requires there to exist a network bridge 'br0', which all
VM's use. Configuring this on a server with two network cards is easy
with netplan:

network:
  version: 2
  renderer: networkd
  ethernets:
    enp2s0f0:
      dhcp4: no
      gateway4: 10.0.0.138
      nameservers:
        addresses: [10.0.0.3, 10.0.0.4]
      addresses: [10.0.11.51/16]
    enp2s0f1:
      dhcp4: true
  bridges:
    br0:
      interfaces: [enp2s0f1]

Modify the gateway4, nameserver addresses and the address(es) for the 
server itself (10.0.11.51/16 in above example).

Also ensure you use correct network device names. These are
displayed with

> ip addr


Create first VM
---------------
To create the first VM, run the interactive Create function. It
asks for details, then creates a VM. Often its good to create
a template VM, then clone this to individual VM's.

If you are running on a server with X windows, select headless no,
and then after installation has started, just from a terminal:

> sudo bash
> virt-manager

If no X-windows, enter "yes" for headless. You must then use 
VNC to complete the install. Run the VNCHelp function, to look up
the port number (usually 5900), then follow the instructions to 
transport the port number to another PC, where you run VNC. 

--
AutoClone is the preferred way of creating new VM's, as
it includes the necessary waits and checks for ping/ssh before
going on.
--------------------------------------------------------------
>>> EOF
/Readme



Dir("/var/lib/libvirt/boot") =>d
error(!d.exists,"Missing directory: " + d.path)
d
/BootImagesDir


# List of VM names to protect against accidental delete
    List()
/DoNotDelete



# Selects boot image
# --
    BootImagesDir.files =>data
    Lambda { P(1).name } =>macroGetElementName
    Lib:MenuSelect (data, macroGetElementName) 
/BootImage



# Run virsh to display status for all defined VM's
	println
	Lib:run(List("virsh","list","--all")).stdout->line println(line) |
	println
/status


# Short for status
    status
/s



P(1,"someTarget") =>target
    println("STARTING " + target)
    Lib:run(List("virsh","start","--domain",target),List,true)
    status
/Start


P(1,"someTarget") =>target
    println("STOPPING " + target)
    Lib:run(List("virsh","destroy","--domain", target),List,true)
    status
/Stop


P(1,"someTarget") =>target
    println("DELETING " + target)
    error(DoNotDelete.contains(target),
        "Can not delete target " + target + ": remove from DoNotDelete list first")
    Stop(target)
    Lib:run(List("virsh","undefine","--domain",target),List,true)
    vdisk = Dir("/var/lib/libvirt/images").file(target + ".qcow2")
    if(vdisk.exists) vdisk.delete
    status
/Delete



# Automatic (and manual) cloning of existing VM (which will be stopped if running)
# --
	P(1) => original           # original VM ("kubsXX")
	P(2) => cloneName          # new VM name
	P(3) => originalIp         # ip of the VM that got cloned
	P(4) => newIp			   # ip/NN
	P(5) => sshUser            # for config
	P(6) => nic                # VM network card to configure ("ens3" etc) - run "ip addr" on original VM

    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

	PDict("original","cloneName","originalIp","newIp","sshUser") => pdict
	if (pdict.hasNullValue) Inner {
		loop
			status
			Lib:ReadValue("Template VM (will be stopped if running)", original) => original
			Lib:ReadValue("New VM name", cloneName) => cloneName
			Lib:ReadValue("Template VM IP address", originalIp) => originalIp
			Lib:ReadValue("New VM IP address (including /NN netmask)", newIp) => newIp
			Lib:ReadValue("SSH user", sshUser) => sshUser
			Lib:ReadValue("Network card (nic) to configure, ex. ens3", nic) => nic
			break(Lib:ReadValueBoolean("Confirm", false))
	}
	error(!newIp.contains("/"), "Invalid newIp - must contain /NN netmask")

    Lib:Header ("Cloning existing VM")

	println("* Stopping original VM " + original)
    Stop(original)

    println("* Creating clone " + cloneName)

    cmd = "virt-clone --original " + original + " --name " + cloneName + " --auto-clone"
            + " --file /var/lib/libvirt/images/" + cloneName + ".qcow2"
    
    Lib:run(cmd.split)

    println("Starting clone")
    Start(cloneName)

    
    
    println("* Waiting for new node to respond to ping")
    ServersMaintenance:WaitForPing (originalIp, 30)

    target = sshUser+"@"+originalIp

    println("* Wait for SSH ok")
    Inner {
    	Lib.Data.yes(20,"x") -> dummy
    		break(SSH:HostOkSSH(target))
    		Sys.sleep(1000)
    }

    
    println("* Configuring hostname")
    ServersMaintenance:VMSetHostname (target, cloneName)

    println("* Configuring netplan")
    ServersMaintenance:VMConfigureNetplan (target, newIp, nic)

    println("* Rebooting new VM: " + cloneName)
    SSH:sudo (target, "reboot", true)

    "Done"
 /Clone






# Create new VM from scratch - fully interactive
    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

    null =>bootImage
    null =>name
    false =>headless
    8192 =>ram
    4 =>cpus
    32 =>disk
    loop
        Lib:Header ("Create new KVM Virtual Machine")

        BootImage =>bootImage
        println("# Selected " + bootImage.path)

        Lib:ReadValue ("New VM name", name) =>name

        println("")
        println("# Headless => no means use virt-manager") 
        println("# Headless => yes (advanced) means use VNC to complete installation")
        Lib:ReadValueBoolean ("Headless", headless) =>headless

        Lib:ReadValueInt ("RAM MB", ram) =>ram
        Lib:ReadValueInt ("CPU's", cpus) =>cpus
        Lib:ReadValueInt ("Disk GB", disk) =>disk
        Lib:ReadValueBoolean ("Enter 'yes' to confirm this is okay", false) =>ok
        break(ok)
    |
    Lib:ReadValueBoolean ("Enter 'yes' to continue", false, "yes","abort") =>continue
    if(!continue,Inner{
        println("Aborting")
        error(true,"Aborting")
    })

    List("virt-install",
        "--name",name,
        "--ram="+ram,
        "--vcpus="+cpus,
        "--cpu","host",
        "--hvm",
        "--network=bridge=br0,model=virtio",
        "--disk","path=/var/lib/libvirt/images/"+name+".qcow2,size="+disk+",bus=virtio,format=qcow2",
        "--cdrom",bootImage.path
    ) =>cmd
    if(headless, 
        cmd+List("--graphics","vnc"),  
        cmd
    ) =>cmd

    debug(cmd.concat(" "))
    Dir.runDetach(cmd)

    <<< EOF
    -----------------------------------------------------------------
    Use vnc or start virt-manager (as root) to finalize installation

    virt-manager can be started by entering 'mgr' and press enter
    -----------------------------------------------------------------
    >>> EOF
/Create





# Reconfigure a VM by editing its XML config file
# --
	status

	P(1,Input("VM to reconfigure").get) => vm

	println("8GB=" + (8*1024*1024) + " Kb")
	println("16GB=" + (16*1024*1024) + " Kb")
	println("32GB=" + (32*1024*1024) + " Kb")

	Stop(vm)
	Dir.run("virsh","edit",vm)
/ReconfigureVM
	
	

# Run virt-manager (required X-windows)
    Dir.run("virt-manager")
/mgr



# Info on using VNC for installation
	status
    readLine("VM name") =>vm

    Dir.runCapture("hostname").nth.trim =>host

    Dir.runCapture("virsh","dumpxml",vm)->line
        assert(line.contains("vnc")) out(line)
    | _.nth =>portInfo

    Dict
        .set("host",host)
        .set("portInfo",portInfo)
        .set("vm",vm)
        .mergeCodes =>data

    <<< EOF
----------------------------------------------
To connect with VNC, locate the port number,
this is listed below. 

Then from remote computer open an ssh:

ssh <user>@<server> -L<PORT>:127.0.0.1:<PORT>

The port is identified by running 

virsh dumpxml ${vm} | grep vnc

where <VM> is the name of the VM. 
This produces the following line:

${portInfo}
----------------------------------------------
    >>> EOF
    ->line
        out(line.merge(data))
/VNCHelp




# Example using AutoClone 
# --
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF
# Utility
    PDict("host","ip")
/H


Sequence(
    H("elastic01.v","10.0.5.11")
    H("elastic02.v","10.0.5.12")
    H("elastic03.v","10.0.5.13")
    H("elastic04.v","10.0.5.14")
    H("elastic05.v","10.0.5.15")
)
/Hosts

Hosts->x out(x.host)
/hosts


# Create one clone
# --
P(1) => host
P(2) => ip
    original="kubs05"  # k-series Ubuntu Server
    cloneName=host
    originalIp="10.0.5.254"   # original VM ip
    sshUser="roar"
    nic="ens3"  ## run "ip addr"  on original VM to decide
    
    KVM:AutoClone(original, host, originalIp, ip+"/16", sshUser, nic)
/CreateClone

# Main function - creates all nodes
# --
    Hosts -> x
    CreateClone(x.host, x.ip)
/CreateAll

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF
->line println(line)
/ExampleAutoClone

