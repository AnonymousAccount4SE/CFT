# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



# Script readme
<<< EOF
--------------------------------------------------------------
NOTE: You MUST run CFT as root for this script to work.
--------------------------------------------------------------

This script manages creation, cloning, delete, start and stop
of Virtual Machines using KVM on Linux.

To get started, perform the following tasks:

* install and enable kvm
* modify network config to create bridge 'br0'
* create first VM

Install KVM
-----------
> sudo apt-get install qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker
> sudo systemctl enable libvirtd
> sudo systemctl start libvirtd

Then copy at least one OS image into /var/lib/libvirt/boot. That's where 
this script expects to find them.

Create network bridge on host server
------------------------------------
This script requires there to exist a network bridge 'br0', which all
VM's use. Configuring this on a server with two network cards is easy
with netplan:

network:
  version: 2
  renderer: networkd
  ethernets:
    enp2s0f0:
      dhcp4: no
      gateway4: 10.0.0.138
      nameservers:
        addresses: [10.0.0.3, 10.0.0.4]
      addresses: [10.0.11.51/16]
    enp2s0f1:
      dhcp4: true
  bridges:
    br0:
      interfaces: [enp2s0f1]

Modify the gateway4, nameserver addresses and the address(es) for the 
server itself (10.0.11.51/16 in above example).

Also ensure you use correct network device names. These are
displayed with

> ip addr


Create first VM
---------------
To create the first VM, run the interactive Create function. It
asks for details, then creates a VM. Often its good to create
a template VM, then clone this to individual VM's.

If you are running on a server with X windows, select headless no,
and then after installation has started, just from a terminal:

> sudo bash
> virt-manager

If no X-windows, enter "yes" for headless. You must then use 
VNC to complete the install. Run the VNCHelp function, to look up
the port number (usually 5900), then follow the instructions to 
transport the port number to another PC, where you run VNC. 

--

The script VM under code.examples is meant for running on 
VM's after creation, and is tested with VM's running Ubuntu 
Server 18.04. It sets up hostname and netplan config file. Please 
modify the functions Gateway4 and Nameservers in the VM script 
before running it on your template VM.

After cloning the template VM, ssh into the IP of the template, 
then run the VM script

> sudo bash
> cd CFT
> ./cft VM Run

Enter hostname and IP address (remember /8 or /16 etc).
^C
> reboot
--------------------------------------------------------------
>>> EOF
/Readme



Dir("/var/lib/libvirt/boot") =d
error(!d.exists,"Missing directory: " + d.path)
d
/BootImagesDir


# List of VM names to protect against accidental delete
    List()
/DoNotDelete



# Selects boot image
# --
    BootImagesDir.files =data
    {* P(1).name } =macroGetElementName
    call "Lib:MenuSelect" (data, macroGetElementName) 
/BootImage



# Various private macros
# --
    Dict
        .set("noSpace", {* P(1).replace(" ","_").replace("^t".unEsc,"_") })
        .set("exec", {* P(1,"ls -l")=cmd println("------> " + cmd) println("") Dir.run(cmd.split) })
/Util




# Run virsh to display status for all defined VM's
    Util.exec.call("virsh list --all")
/status


# Short for status
    status
/s



P(1,"someTarget")=target
    println("STARTING " + target)
    Util.exec.call("virsh start --domain " + target)
    status
/Start


P(1,"someTarget")=target
    println("STOPPING " + target)
    Util.exec.call("virsh destroy --domain " + target)
    status
/Stop


P(1,"someTarget")=target
    println("DELETING " + target)
    error(DoNotDelete.contains(target),
    	"Can not delete target " + target + ": remove from DoNotDelete list first")
    Stop(target)
    Util.exec.call("virsh undefine --domain " + target)
    Dir("/var/lib/libvirt/images").file(target + ".qcow2").delete
    status
/Delete


# Interactive cloning of existing VM - stops original
# --
    call "Lib:Header" ("Cloning existing VM")
    null=original
    null=cloneName
    null=originalIp
    null=newIp
    loop
        status
        call "Lib:ReadValue" ("Original VM", original) =original
        call "Lib:ReadValue" ("New VM name / will also be host name", cloneName) =cloneName
        call "Lib:ReadValue" ("Original IP address or name (kubsXX.v)", originalIp) =originalIp
        call "Lib:ReadValue" ("New IP address and mask: xx.xx.xx.xx/MM", newIp) =newIp
        call "Lib:ReadValueBoolean" ("Ok", false) =ok
        break(ok)
    |
    Stop(original)
    Util.exec.call("virt-clone --original " + original + " --name " + cloneName + " --auto-clone"
        + " --file /var/lib/libvirt/images/" + cloneName + ".qcow2")
    Start(cloneName)
    status

    println
    println("* Waiting for new node to respond to ping")
    call "ServersMaintenance:WaitForPing" (originalIp, 30)

    println
    Input("Enter ssh user name").get =sshUser

    println
    println("*** NOTE ***")
    println("------------")
    println("Ensure you can SSH into " + sshUser + "@" + originalIp + " without password being root,")
    println("as this script must always run as root (for KVM cloning etc).")
    println
    println("Also verify that you can run sudo without password.")
    readLine("(Press Enter)")
    println

    sshUser+"@"+originalIp =target
	
    println("* Configuring hostname")
    call "ServersMaintenance:VMSetHostname" (target, cloneName)

    println("* Configuring netplan")
    call "ServersMaintenance:VMConfigureNetplan" (target, newIp)

    println("* Rebooting new VM")
    call "ServersMaintenance:run" (target, "sudo reboot")

    "Done"
/Clone






# Create new VM from scratch - fully interactive
    null =bootImage
    null =name
    false =headless
    8192 =ram
    4 =cpus
    32 =disk
    loop
        call "Lib:Header" ("Create new KVM Virtual Machine")

        BootImage =bootImage
        println("# Selected " + bootImage.path)

        call "Lib:ReadValue" ("New VM name", name) =name

        println("")
        println("# Headless = no means use virt-manager") 
        println("# Headless = yes (advanced) means use VNC to complete installation")
        call "Lib:ReadValueBoolean" ("Headless", headless) =headless

        call "Lib:ReadValueInt" ("RAM MB", ram) =ram
		call "Lib:ReadValueInt" ("CPU's", cpus) =cpus
        call "Lib:ReadValueInt" ("Disk GB", disk) =disk
        call "Lib:ReadValueBoolean" ("Enter 'yes' to confirm this is okay", false) =ok
        break(ok)
    |
    call "Lib:ReadValueBoolean" ("Enter 'yes' to continue", false, "yes","abort") =continue
    when (!continue,{
        println("Aborting")
        error(true,"Aborting")
    })

    List("virt-install",
        "--name",name,
        "--ram="+ram,
        "--vcpus="+cpus,
        "--cpu","host",
        "--hvm",
        "--network=bridge=br0,model=virtio",
        "--disk","path=/var/lib/libvirt/images/"+name+".qcow2,size="+disk+",bus=virtio,format=qcow2",
        "--cdrom",bootImage.path
    ) =cmd
    if(headless, 
        cmd+List("--graphics","vnc"),  
        cmd
    ) =cmd

    debug(cmd.concat(" "))
    Dir.runDetach(cmd)

    <<< EOF
    -----------------------------------------------------------------
    Use vnc or start virt-manager (as root) to finalize installation

    virt-manager can be started by entering 'mgr' and press enter
    -----------------------------------------------------------------
    >>> EOF
/Create


# Run virt-manager (required X-windows)
    Dir.run("virt-manager")
/mgr



# Info on using VNC for installation
	readLine("VM name") =vm

	Dir.runCapture("hostname").nth.trim =host

	Dir.runCapture("virsh","dumpxml",vm)->line
		assert(line.contains("vnc")) out(line)
	| _.nth =portInfo

	Dict
		.set("host",host)
		.set("portInfo",portInfo)
		.set("vm",vm)
		.mergeCodes =data

	<<< EOF
----------------------------------------------
To connect with VNC, locate the port number,
this is listed below. 

Then from remote computer open an ssh:

ssh <user>@<server> -L<PORT>:127.0.0.1:<PORT>

The port is identified by running 

virsh dumpxml ${vm} | grep vnc

where <VM> is the name of the VM. 
This produces the following line:

${portInfo}
----------------------------------------------
	>>> EOF
	->line
		out(line.merge(data))
/VNCHelp



