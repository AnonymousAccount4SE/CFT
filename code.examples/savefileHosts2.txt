# Readme
<<<<<<<<<<<< EOF

A descriptive format for describing attributes with hosts, for
managing automatic updates.

Processes Hosts.txt file on following format:

[Property=Value]
HOST
HOST
HOST [OverrideValue]?
 :
 

>>>>>>>>>>>> EOF
/Readme


# Data file
(Lib:DirPrivate).file("Hosts.txt")
/HostsFile


# Parse file, return data object
# --
	data = AnsibleDefs:Parse(HostsFile.read)
	CheckData(data)
	data
/ProcessFile


# Check integrity
# --
	P(1)=>data
	foundError=false
	data.LAllElements.call->hostname
		#println("Checking " + hostname)
		data.LGet.call(hostname,"KnownHost") => x
		if (x==null) {
			println("ERROR: Host " + hostName + " not present in KnownHost set")
			foundError=true
		}
	|
	error(foundError,"Data contains errors")
	"data integrity ok"
/CheckData



# Explore data
# --
	data=ProcessFile

	# Creating an object running the main loop, with
	# each menu entry being a parameterless lambda 
	# --
	Dict
		.set("data",data)
		.set("regex",Glob("*",false).regex)
		.set("done", false)
		
		.set("Lselect", Lambda {
			self.set("regex", Glob(readLine("Glob expr"),false).regex)
			self.LshowHosts.call
		})
		.set("LshowHosts", Lambda {
			self.data.LAllElements.call->host
				assert(self.regex.match(host))
				println(host)
		})
		.set("LshowFields", Lambda {
			self.data.LAllElements.call->host
				assert(self.regex.match(host))
				report(host,"","")
				hInfo=self.data.data.get(host)
				hInfo.keys.sort->field
					value=hInfo.get(field)
					report("",field,value)
			| _-> line
				println(line)
		})
		.set("Lquit", Lambda {
			self.set("done",true)
		})
		
		.set("Lmenu", Lambda {
			d = Lambda{ PDict("name","lambda") }
			Sequence(
				d.call("(1) Enter search pattern", self.Lselect)
				d.call("(2) Show hosts", self.LshowHosts)
				d.call("(3) Show fields", self.LshowFields)
				d.call("(9) Quit", self.Lquit)
			) => options
			Lib:MenuSelect(options, Lambda{P(1).name}).lambda.call
		})
		.set("Lmainloop", Lambda {
			loop
				break(self.done)
				self.Lmenu.call
		})
		.Lmainloop.call
/Explore
	




