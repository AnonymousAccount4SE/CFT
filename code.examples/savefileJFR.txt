# Readme
<<<<<<<<<<<< EOF
Processing flight file after running JDK Flight Recorder (profiling tool)
>>>>>>>>>>>> EOF
/Readme


# Processes flight.txt file
#
# After doing a JDK Flight Recorder run, we get flight.jfr (see cft script). 
# Then we produce text file, by running 
#   jfr print flight.jfr > flight.txt
# This function analyses that file.
# 
# Processes about 130k lines per second on laptop with AMD Ryzen 5 3500U @ 2.1 GHz (and SSD)
# --
Dir.file("flight.txt")
/f

# get blocks of text (separated by empty lines)
	list=List
	dict=Dict
	Lib.Files.LineReader(f).start =>reader
	
	count=0
	startTime=currentTimeMillis
	
	loop
		line=reader.read
		break(line==null)
		count=count+1
		
		if (line.trim.length==0) {
			ProcessBlock(list,dict)
			list=List
		} else {
			list.add(line)
		}
	|
	
	time=currentTimeMillis-startTime
	println("#lines=" + count)
	println("#per second=" + (1000*count/time).i)
	
	sum=0
	dict.keys->key sum=sum+dict.get(key)
	|
	
	dict.keys->key out(Int(dict.get(key),key)) 
	| _.sort->x 
		key=x.data 
		val=(100*dict.get(key)/sum).i
		report(key,""+val+"%") 
	| => output
	Dir.file("JFR_out.txt").create(output)
	output
/run



# Process block
	P(1)=>list
	P(2)=>dict
	
	if (list.first.startsWith("jdk.ExecutionSample")) {
		
		list->line
			if (line.contains("rf.configtool")) {
				s=line.trim.before("line:")
				dict.set(s, dict.get(s, 0)+1)
				break
			}
	}
/ProcessBlock 
		
