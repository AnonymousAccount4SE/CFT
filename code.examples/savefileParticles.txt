# Readme
# --
<<<<<< EOF

Toying with identifying ways to unify particle energies, by dividing each
value repeatedly, or actually, multiplying by factor in range 0-1, until value
inside a given range, then calculate variance.

Values near 1 are invalid, as they creep the value down in smaller and smaller
increments, making all values line up nicely, so mostly run with range 0.05 to 0.8

Found that the smallest variance is for factor 0.6966728 

Functions

   - "r" - set range
   - "s" - search range, looking for minimum variance
   - "h" - show histogram for current range

Currently focused on quarks only.

>>>>>> EOF
->line
	println("| " + line)
/Readme

P(1)*1000 
/K

P(1)*1000000
/M

P(1)*1000000000
/G

# Define range
# --
	readLine("Start value").parseFloat=>start
	readLine("End value").parseFloat=>end
	if (start < 0.05) start=0.05
	if (end > 0.95) end=0.95

	SymDict(start,end) => data
	Db2:Set(Sys.scriptId,"range",data)
/SetRange

# Get range
# --
	Db2:Get(Sys.scriptId,"range") => result
	if (result==null) {
		SetRange
		result=GetRange
	}
	result
/GetRange


# Data
# --
	Sequence(
		M(2.2)   # up
		G(1.28)  # charm
		G(173.1) # top
		M(4.7)   # down
		M(96)    # strange
		G(4.18)  # bottom
	)
/Data

# Sin(45) = Sqrt(2)/2
# --
	0.707106781186
/factor


# Normalize value
# --
	P(1,100000) => value
	P(2,0.5)=> factor
	P(3,1000) => range

	loop
		break(value<range)
		value=value*factor
	|
	value
/NormalizeValue


# Process data set
# --
	P(1,0.5)=>factor
	Data->value
		out(NormalizeValue(value, factor))
/Normalize


# Calculate variance of set
# --
	P(1,List(1,2,3))=>data
	sum=0
	data->x sum=sum+x |
	avg=sum/data.length
	varianceSum=0
	data->x 
		diff=if(x>avg, x-avg, avg-x)
		varianceSum=varianceSum + (diff*diff)
	|
	# return value
	varianceSum / data.length
/Variance



# Fix presentation of floats
# --
	P(1,3.14159265) => value
	P(2,5) => numDecimals
	s=""+value
	pos=s.indexOf(".")
	if (pos >= 0) {
		s=s.sub(0,pos+1+numDecimals)
	}
	s
/fix





# Find lowest variance for current range
# --
	lowestVariance = 999999
	lowestVarianceFactor = 0

	highestVariance=0
	highestVarianceVactor=0

	STEPS=10000

	range=GetRange
	Lib.Data.for(range.start, range.end, (range.end-range.start)/STEPS)->factor
		data = Normalize(factor)
		var = Variance(data)
		if (var < lowestVariance) {
			lowestVariance=var
			lowestVarianceFactor=factor
		}
		if (var > highestVariance) {
			highestVariance=var
			highestVarianceFactor=factor
		}
		println("factor=" + fix(factor,12) + " variance=" + fix(Variance(data),12))

	|
	println("--")
	println("LOW  factor="+fix(lowestVarianceFactor,12) + " variance=" + fix(lowestVariance,12))
	println("HIGH factor="+fix(highestVarianceFactor,12) + " variance=" + fix(highestVariance,12))

	lowestVarianceFactor
/Search



SetRange
/r

Search
/s



# Show for specific factor
# --
	P(1,readLine("Enter factor").parseFloat) => factor
	if (factor > 1) factor=1/factor
	if (factor < 0.05) factor=0.05
	if (factor > 0.95) factor=0.95

	data = Normalize(factor)
	data->x
		println(x)
	|
	println
	println("Factor=" + factor)
	println("Variance=" + Variance(data))
	true
/Show
	


# Visualize
# --
	range=GetRange
	LINES=Term.h
	Lib.Data.for(range.start, range.end, (range.end-range.start)/LINES)->factor
		data = Normalize(factor)
		var = Variance(data)
		out(AValue("",var,SymDict(factor)))
	| => values

	WIDTH=Term.w-11
	max=0
	values->v if(v.v>max) max=v.v |
	factor=WIDTH/max
	values->v
		len=(v.v*factor).i
		Lib.Data.yes(len,"#").concat => bar
		fStr=(""+v.meta.factor+"00000000").sub(0,8)
		println(fStr + " " + bar)
/Histogram

Histogram
/h
