# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2022 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<< EOF
Parsing SFTP log lines

>>>> EOF
/Readme


# Get logline
# --
    Db2:Get("ElasticSFTP","lines",null) => list
    if (list==null) {
        Input("enter file path and name").get => path
        list=File(path).read

        Db2:Set("ElasticSFTP","lines",list)
        Db2:Set("ElasticSFTP","pos",0)
    }
    Db2:Get("ElasticSFTP","pos",0) => pos
    Db2:Get("ElasticSFTP","lines") => lines
    if (pos >= lines.length) pos=0
    lines.nth(pos) => line
    Db2:Set("ElasticSFTP","pos",pos+1)

    line.split("|") => parts
    Date.setFormat("dd/MM/yyyy HH:mm:ss.000").fmt => now
    parts.first+"|"+now+"|"+now +"|"+parts.keep(3).concat("|") 
/GetLogLine


# Reprocess loglines
# --
    


# LogFile
# --
    File("/mnt/storage/simulatedLog.txt")
/LogFile



# Outfile
# --
    File("/mnt/storage/simulatedOut.txt")
/OutFile



# Push pipeline config to server
# --
    target="roar@elk04.v"

    Lib:TmpFile("test","conf") => f
    f.create(Pipeline)
    SSH:sudo(target,"systemctl stop logstash")
    SSH:copy(f,target,"./test.conf")
    SSH:sudo(target,"cp ./test.conf /etc/logstash/conf.d")
    SSH:sudo(target,"systemctl start logstash")
/Push
    
    
# Random number
# --
    P(1,100) => range
    P(2,1) => seed
    99398348992329 % currentTimeMillis % range
/Rnd


# Generate single log line
# --
    s=GetLogLine
    println(s)
    LogFile.append(s)
/Run



# Generate N log lines with random delays between them
# --
    Input("How many lines").get.parseInt => lines
    loop
        lines=lines-1
        break(lines <= 0)
        println("lines=" + lines)

        Sys.sleep(100+Rnd(2000))
        Run
/Generate


# Show latest input 
# --
    LogFile.read.last(10)
/ShowInput

# Get results
# --
    OutFile.read.last(10) -> json
        JSON:Parse(json) => obj
        JSON:PP(obj)->line out(line)
/Show



# SFTP parsing lines 
# --
<<<<<<<<<<<<<<<<<<< EOF
input {
    file {
        path => [ "/mnt/storage/simulatedLog.txt" ]
    }
}
filter {

        # oniguruma
        # https://github.com/kkos/oniguruma/blob/master/doc/RE

        dissect {
                mapping => {
                        "message" => "STOR|%{ts} %{+ts}|%{}|[%{info}] %{tRead}: %{tStor} %{tStart} %{fPath}.jpg%{rest}"
                }
        }
        if [tRead] != "READ" {
            drop {}
        }
        if [tStart] != "START" {
            drop {}
        }
        if "_dissectfailure" in [tags] {
                drop {}
        }
        mutate {
                # changes filepath into list, losing the original string version!
                # --
                split => [ "fPath","/" ]
                add_field => [ "fname","%{[fPath][-1]}",
                                "binCode","%{[fPath][1]}"
                            ]
        }
        # Identify file type from file name
        grok {
                match => {
                        "fname" => "(?<ftype>[a-zA-Z]{3})%{GREEDYDATA:}"
                }
        }
        # Parse 'ts' timestamp to @timestamp
        # --
        date {
            match => [ "ts", "dd/MM/yyyy HH:mm:ss.SSS" ]
        }
        # Delete some fields
        # --
        mutate {
            remove_field => [ "ts", "tRead", "tStor", "tStart", "fPath", "rest" ]
        }
}
output {
   file {
        path => "/mnt/storage/simulatedOut.txt"
   }
    elasticsearch {
        index => "sim001-%{+YYYY.MM.dd}"
        hosts => [ "10.0.5.62:9200", "10.0.5.63:9200", "10.0.5.64:9200" ]
    }
}
>>>>>>>>>>>>>>>>>>>>> EOF
/Pipeline
