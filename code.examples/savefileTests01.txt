# Readme
<<<<<<<<<<<<<<<< EOF
Testing that local blocks scope and operation is correct (v2.4.0)
Also verifying that inner blocks and lambdas do not affect outer loop logic

2021-03-13 RFO
>>>>>>>>>>>>>>>> EOF
/Readme



a={1+1}
println("a="+a)
/t1

t1=="a=2"
/Test01_SumInsideLocalBlock




Inner{1+1}
/t1b

t1b==2
/Test01_SumInsideInnerBlock




{List(1,2,3)->x out(x+10)}
/t2

t2.concat("-")=="11-12-13"
/Test02_ListIterInLocalBlock




{List(1,2,3)->x out(x+10) | _.sum}
/t3

tryCatch(t3).ok == false
/Test03_PipeInsideLocal_ShouldFail




Inner {List(1,2,3)->x out(x+10) | _.sum}
/t4

t4==36
/Test04_PipeInsideInner




if(true) {
	1
} else {2
}
/t5

t5==1
/Test05_IfWithLocalBlocks



P(1)=>bool
if(bool) {
	List(1,2,3)->x out(x)
} else {
	1
}
/t5b

t5b(true).concat("-")=="1-2-3" && t5b(false)==1
/Test05_AlternateListOrValue




List(1,2,3)->x
	out(x)
	if (x%2==0) {
		out("even")
	} else {
		out("odd")
	}
/t6

t6.concat=="1odd2even3odd"
/Test06_ConditionaOutLocal




List(1,2,3)->x
	out(x)
	if (x%2==0) Inner {
		out("even")
	} else {
		out("odd")
	}
/t6b

t6b.concat=="1odd23odd"
/Test06_ConditionaOutInnerLocal






List(1,2,3)->x 
	if (x%2==0) {
		assert(false)
	}
	out(x)
/t7

t7.concat("-")=="1-3"
/Test07_ConditionalAssertFalseLocal




List(1,2,3)->x
	if (x%2==0) Inner {
		List(4,5,6) -> y assert(false)
	}
	out(x)
/t8

t8.concat("-")=="1-2-3"
/Test08_OuterLoopUnaffectedByInnerBlockLoop





List(1,2,3)->x
	if (x%2==0) Inner {
		assert(false)
	}
	out(x)
/t9

t9.concat("-")=="1-2-3"
/Test09_OuterLoopUnaffectedByInnerBlockAssert





List(1,2,3)->x
	Lambda{assert(false)}.call
	out(x)
/t10

t10.concat("-")=="1-2-3"
/Test10_OuterLoopUnaffectedByLambdaAssert





# Run all TestX
# --
	Sys.functions.sort->f
		assert(f.startsWith("Test"))
		report(f,eval(f))
/RunAll

