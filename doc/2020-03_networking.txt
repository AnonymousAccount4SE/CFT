CFT as a service?
-----------------
Setting up systemd services is simple enough. Must use some global port numbers.





Intelligent networking
----------------------
ObjNet
	SessionManager
		TCPSession
			ProtocolManager
				Receiver
				Sender

When a client connects to a server (listen port), the server sends a number of Ping messages,
which when decoded on the client side contains a sanity check, which reveals if client is using
wrong access code. The client does not respond to ping messages.

Then the server regularly sends IdRequest messages, with its own HostInfo. The client in turn
responds to these with IdResponse, and its HostInfo. This traffic is managed by the
corresponding Protocol Managers.

Using bang-path?

Preferrably automatic routing. 

Also need to lose the @1 @2 hack, and instead connect to local instances via loopback for
parallel sessions with true control over IO (Stdio class).

Should be able to dismantle the connection between two nodes, without resulting in exceptions, though.

---






---- 





We need to create an ad-hoc network of nodes that form a graph, where both 
commands and output, plus binary data can share a connection, in the form of different
structured objects being sent and received.

The graph topology means there is an element of routing.

# get or create persistent network presence object
Net.publicName("aaa")
Net.listen(2500)
% Enter random salt: xxxx
% code is 123 456

### Somewhere else

Net.create("bbb")
/net

net.connect("host:2500")
% Enter code? 123 456
% Connect successful. Session encryption key generated.

net.list
    Node "aaa" @ 10.0.0.21:2500
    Node "bbb" @ 10.0.10.1

net.listen(80)
% ...

## somewhere else

net.create("behindFirewall").connect("10.0.10.1",80)

------

A host net object may both be connected to another (slave mode) and host listen ports (master mode),
for other slaves to connect to.

A routing table is constructed, and data is forwarded through others to get to the target.


------

Other commands:

Net.getScript("aaa","Search")






    
------

At this point, the 

P(1)=currHost
"["+currHost+"] " =prompt
loop
	readLine(prompt) =cmd
	break(cmd.equals("::"))
	Net.host(currHost).exec(cmd)
/remoteShell




