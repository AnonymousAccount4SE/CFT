# 
# 2018-05-24 
#

### OBSOLETE

Stmt
	Expr ProcessingLoop*

Expr
	ExprA+"||"
    
ExprA
	ExprB+"&&"
    
ExprB
	ExprC+">|<|>=|<=|==|<>"

ExprC
	ExprD+"+-"
    
ExprD
	ExprTerminal+"*/%"
    
ExprTerminal
	Integer | String | Boolean
	LookupOrCall

LookupOrCall
	LookupOrCallSingle ("." LookupOrCallSingle)*

LookupOrCallSingle
	Identifier ("(" Expr*"," ")")? 
	
ProcessingLoop
	"->" ProcessingStmt*";"

ProcessingStmt
	ProcessingStmtAssign
	ProcessingStmtNot
	ProcessingStmtAssertReject
	LookupOrCall

ProcessingStmtAssign
	"=" identifier

ProcessingStmtNot
	"!"

ProcessingStmtAssertReject
	"assert"|"reject"  ( "(" identifier ")" )

#
# No syntax for lists, those are created by global function list(...), which returns a ValueList
#

Example:
	list("x","y","x") ->x Dir("c:\test").sub(x).mkdir

	list("TIF","ACT","TR") 
	/Types
	Dir("c:\test\ok").getFiles 
	/Files
	Types->t Files->f f.name.startsWith(t) assert f.name=X X.length=len X.sub(len,6)=bin emit(bin)
		# assert(ident) is conditional "continue" on loop variable <ident> if stack value not true
		# assert is conditional "continue" on current loop if stack value not true
		# reject is inverse assert
		
	/Bins
	list("c:\target1","c:\target2")->t emit(Dir(t))
	/RootDirs
	RootDirs->root Bins->bin root.sub(bin)=dir emit(dir.sub("in)); emit(dir.sub("out"));
	/DataDirs

	/DataDirs->d d.mkdir(); d.deleteFiles()
	/CreateDirs

