# 
# 2018-06-13
#

# 2018-06-13 Fixed dotted lookup (ExprE)
#            Added negative numbers
#            Added help system

# 2018-06-14 Calling saved code lines by name (CodeHistory lookup)
#            Restructuring Runtime
#            :save ident / :load ident	
#            ?ident
#            Dir().copy(File)
#            Dir().create() Dir().delete()
#            File.delete()


Stmt
	StmtPart+

StmtPart
	StmtAssign
	StmtLoop
	StmtAssertReject
	Expr

Expr
	ExprA+"||"
    
ExprA
	ExprB+"&&"
    
ExprB
	ExprC+">|<|>=|<=|==|<>"

ExprC
	ExprD+"+-"
    
ExprD
	ExprE+"*/%"

ExprE
	ExprTerminal ("." LookupOrCall)*
    
ExprTerminal
	"(" Expr ")"
	"!" Expr
	"-" Expr
	LiteralValue
	LookupOrCall

LookupOrCall
	Identifier ("(" Expr*"," ")")? 
	
StmtLoop
	"->" identifier 

StmtAssign
	"=" identifier

StmtAssertReject
	"assert"|"reject"  ( "(" identifier ")" )

#
# No syntax for lists, those are created by global function list(...), which returns a ValueList
#

Example:
	list("x","y","x") ->x Dir("c:\test").sub(x).mkdir

	list("TIF","ACT","TR") 
	/Types
	Dir("c:\test\ok").getFiles 
	/Files
	Types->t Files->f f.name.startsWith(t) assert f.name=X X.length=len X.sub(len,6)=bin emit(bin)
		# assert(ident) is conditional "continue" on loop variable <ident> if stack value not true
		# assert is conditional "continue" on current loop if stack value not true
		# reject is inverse assert
		
	/Bins
	list("c:\target1","c:\target2")->t emit(Dir(t))
	/RootDirs
	RootDirs->root Bins->bin root.sub(bin)=dir emit(dir.sub("in)); emit(dir.sub("out"));
	/DataDirs

	/DataDirs->d d.mkdir(); d.deleteFiles()
	/CreateDirs

