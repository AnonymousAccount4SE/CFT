------------------------------------------------------------------
Generated file - see script file $Inner{savefile}
------------------------------------------------------------------

Introduction

What CFT is not

So what is it for?
 * Functions example
 |   No parantheses?
 * Mission-critical operations
 * Non-critical tasks
 * The boring stuff

CFT as a shell
 * Navigating directories
 * Show content of file

The help system

List basics

Files
 * Create file
 * Read file
 * Append to file
 * Page through a file
 * Show bytes of file
 * Encoding
 * Delete a file

Directories
 * Create a subdirectory
 * Parent directory
 * Get files in a directory
 * Create a file in a directory
 * Get immediate directories in a directory
 * Get all files recursively under a directory
 * Get all directories recursively under a directory:
 * Delete a sub-directory

The shell() function

Core types
 * String literals

List iteration / filtering
 * Iterating over list content
 * Filtering with assert(), reject() and break() + out()
 * The condOut() statement
 * List addition

Creating functions
 * Naming lines of code
 * Calling a function
 * Listing custom functions

Savefiles
 * Save
 * Load
 * Create new empty script
 * The @e shortcut
 * CFT.props - codeDirs

Protecting files and directories
 * Example
 * No guarantee
 * Laziness is our friend

CFT as a functional programming language
 * Code only
 * Local variables
 * Stack vs expressions
 * Nested loops
 * Loop spaces - "pipes"
 * Result value from a loop space
 |   If the loop space contains looping ...
 |   Otherwise ...
 * Function parameters
 |   Simple example
 |   Asking for missing value

Conditional execution
 * List filtering
 * if() expression
 * when() expression
 * error() expression

Block expressions
 * Block expressions are real expressions
 * Pitfalls
 * Full functionality

Running external programs
 * Summary
 * Dir.run()
 * Dir.runCapture()
 * Dir.runDetach()
 * Dir.runProcess() / .runProcessWait()
 |   ssh without password
 * External Program Status
 |   Example

Editing script files
 * Using editor for entering code
 * Auto reload
 * No auto save!!
 |   Losing changes
 * Multi-line functions
 * Comments
 * First line of a function ...
 * Debug

Interactive use
 * Change current directory: cd
 |   Change drive letter in Windows
 |   Paths with space
 * List files: ls
 * Display text file: cat, more, edit
 |   Editing a previous file again
 |   cat, more, edit - implementation
 * Print working directory: pwd
 * Using cd, ls, cat, more and edit inside (function) code
 * Get data from user: Input() and readLine()

Searching files / report()
 * report()
 * Multi-line example
 * Grep - complex example
 * Working with huge logs - counting hits
 |   Counting hits
 |   Limiting search to a few files

Searching log files
 * Lib.Files.DateSort
 |   DateSort.search()
 * Lib.Files.LineReader(file)

Generalized sorting
 * Example: file size
 * Example: file name

Dictionary objects / Dict()

Date and time processing
 * Milliseconds
 * The Date object
 * The Date.Duration object

Session persistent data / ValDef / Val

Synthesis
 * The problem
 * Creating code from values
 * Example using :syn
 * Example using :NN

Repeat last program line

Output format / Cfg
 * The @term shortcut
 * Line wrapping

Templating
 * Merging text with Dict
 * Using individual template files
 * Script file "here" documents
 |   A more complex example
 * Using DataFile
 |   Include blank lines
 |   Filter away comments
 * PDict()

Use as a calculator
 * Expressions and "variables"
 * Lib.Math
 * Lib.Convert
 * Lib.Plot

Various topics
 * Command line args
 * Calling functions in external scripts
 * Protecting directories and files
 |   A protected directory does not allow
 |   A protected file does not allow
 * Working with pasted text lines from stdin
 * Differing between Windows and Linux
 * Session state
 * Predicate calls
 * List.push()
 * Dict set strings
 * Dict fields as functions
 * Dict.get with default value
 * List.nth() negative indexes
 * Function parameters as List or Dict
 * The general loop statement
 * Storing CFT data structures to file - syn() and eval()
 * String .esc() and .unEsc()
 |   Escape codes
 * Automating interactive functions / Sys.stdin()
 * Running colon commands from script code
 * Simple line editing
 |   Develop complex code in steps
 * Macros
 |   Simple example
 * CFT.props - mCat, mEdit and mMore macros
 * CFT.props - shortcuts

Some example code
 * Windows PowerShell
 * Windows CMD
 * Linux get user name

Lib.Text.Lexer
 * Concept
 * Implementation
 |   .sub()
 * Reusable nodes - integer sequence

Reference: Colon commands

Reference: Synthesizable types

Fun and strange stuff
 * Why Input("label").get?
 * Block expressions are strange
 * Function name AFTER code?
 * Stack-based assignment?
 * Using Sys.stdin to run colon commands etc
